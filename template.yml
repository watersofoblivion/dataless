AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  CodeBucket:
    Type: String
    Description: The S3 bucket user code is stored in.
  CodePrefix:
    Type: String
    Description: The prefix into the S3 bucket code is stored in.
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''
  DNSDomainName:
    Type: String
    Description: The domain name in Route53, such as example.com, this warehouse is served from.
    Default: ''
  DNSName:
    Type: String
    Description: The base DNS name, such as warehouse.example.com, this warehouse is served from.  Must be a the DNSDomainName or a subdomain of it.
    Default: ''
  ValidationDomain:
    Type: String
    Description: The DNS domain to validate ACM certificates against, such as example.com.  Should be a the DNSDomainName.
    Default: ''
  HostedZoneID:
    Type: String
    Description: The existing Hosted Zone to use.  Creates a Hosted Zone if not provided.
    Default: ''
  EnableVPC:
    Type: String
    Description: If non-empty, create a VPC.  EnableEC2Instance, EnableEMRCluster, and EnableRedshift imply this option.
    Default: ''
  EnableEC2Instance:
    Type: String
    Description: If non-empty, create an EC2 instance for use by Data Pipeline.
    Default: ''
  EC2InstanceSize:
    Type: String
    Description: The instance size of the EC2 instance for use by Data Pipeline
    Default: t2.nano
  EnableEMRCluster:
    Type: String
    Description: If non-empty, create an EMR cluster.
    Default: ''
  EMRMasterInstanceType:
    Type: String
    Description: The instance type of the master instances in the EMR cluster.
    AllowedPattern: "[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*"
    Default: m1.medium
  EMRMasterInstanceCount:
    Type: Number
    Description: The number of master instances in the EMR cluster.
    MinValue: 1
    MaxValue: 256
    Default: 1
  EMRCoreInstanceType:
    Type: String
    Description: The instance type of the core instances in the EMR cluster.
    AllowedPattern: "[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*"
    Default: m1.medium
  EMRCoreInstanceCount:
    Type: Number
    Description: The number of core instances in the EMR cluster.
    MinValue: 1
    MaxValue: 256
    Default: 1
  EnableRedshift:
    Type: String
    Description: If non-empty, create a Redshift cluster.
    Default: ''
  RedshiftNodeType:
    Type: String
    Description: The type of instances in the Redshift cluster.
    AllowedValues:
      - dc2.large
      - dc2.8xlarge
      - ds2.xlarge
      - ds2.8xlarge
    Default: dc2.large
  RedshiftNumberOfNodes:
    Type: Number
    Description: The number of nodes in the Redshift cluster.
    MinValue: 1
    MaxValue: 100
    Default: 1

Conditions:
  DNSEnabled: !And
      - !Not [!Equals [!Ref DNSDomainName, ""]]
      - !Not [!Equals [!Ref DNSName, ""]]
      - !Not [!Equals [!Ref ValidationDomain, ""]]
  InternalHostedZone: !And
      - !Not [!Equals [!Ref DNSDomainName, ""]]
      - !Not [!Equals [!Ref DNSName, ""]]
      - !Not [!Equals [!Ref ValidationDomain, ""]]
      - !Not [!Equals [!Ref HostedZoneID, ""]]
  EC2InstanceEnabled: !Not [!Equals [!Ref EnableEC2Instance, ""]]
  EMREnabled: !Not [!Equals [!Ref EnableEMRCluster, ""]]
  RedshiftEnabled: !Not [!Equals [!Ref EnableRedshift, ""]]
  RedshiftSingleNode: !Equals [!Ref RedshiftNumberOfNodes, 1]
  VPCEnabled: !Or
    - !Not [!Equals [!Ref EnableVPC, ""]]
    - !Not [!Equals [!Ref EnableEC2Instance, ""]]
    - !Not [!Equals [!Ref EnableEMRCluster, ""]]
    - !Not [!Equals [!Ref EnableRedshift, ""]]

Outputs:
  BaseURL:
    Value: !If
      - DNSEnabled
      - !Ref DNSName
      - !Sub "https://${API}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}"

Mappings:
  AMIs:
    us-east-1:
      PV64Instance: ami-0023040df18933030
    us-west-2:
      PV64Instance: ami-afe1c0d7
    eu-west-1:
      PV64Instance: ami-0c651f40f9861388f
    ap-southeast-2:
      PV64Instance: ami-0d783a243942fbe54
    ap-northeast-1:
      PV64Instance: ami-0f16a2ca7efacfa65

Globals:
  Function:
    Runtime: go1.x
    CodeUri:
      Bucket: !Ref CodeBucket
      Key: !Sub "${CodePrefix}/lambdas.zip"
    Tracing: Active
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole
  Api:
    TracingEnabled: true
    EndpointConfiguration: EDGE
  SimpleTable:
    SSESpecification:
      SSEEnabled: true

Resources:
  ##########
  # Bucket #
  ##########

  Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
      MetricsConfigurations:
        - Id: raw-ad-impressions
          Prefix: data/raw/ad/impressions/
        - Id: raw-ad-clicks
          Prefix: data/raw/ad/clicks/
        - Id: ad-impressions
          Prefix: data/lake/ad/impressions/
        - Id: ad-clicks
          Prefix: data/lake/ad/clicks/

  #######
  # VPC #
  #######

  VPC:
    Type: AWS::EC2::VPC
    Condition: VPCEnabled
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: VPCEnabled
    DependsOn:
      - VPC

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: VPCEnabled
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  Subnet:
    Type: AWS::EC2::Subnet
    Condition: VPCEnabled
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: 172.31.0.0/16
      MapPublicIpOnLaunch: true

  RouteTable:
    Type: AWS::EC2::RouteTable
    Condition: VPCEnabled
    Properties:
      VpcId: !Ref VPC

  Route:
    Type: AWS::EC2::Route
    Condition: VPCEnabled
    DependsOn:
      - GatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: VPCEnabled
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: VPCEnabled
    Properties:
      GroupName: SecurityGroup
      GroupDescription: Default Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ############
  # Redshift #
  ############

  RedshiftClusterSecurityGroup:
    Type: AWS::Redshift::ClusterSecurityGroup
    Condition: RedshiftEnabled
    Properties:
      Description: Redshift Cluster Security Group

  RedshiftClusterSecurityGroupIngress:
    Type: AWS::Redshift::ClusterSecurityGroupIngress
    Condition: RedshiftEnabled
    Properties:
      ClusterSecurityGroupName: !Ref RedshiftClusterSecurityGroup
      CIDRIP: 0.0.0.0/0

  RedshiftClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Condition: RedshiftEnabled
    Properties:
      Description: Redshift Cluster Subnet Group
      SubnetIds:
        - !Ref Subnet

  Redshift:
    Type: AWS::Redshift::Cluster
    Condition: RedshiftEnabled
    Properties:
      ClusterType: !If [RedshiftSingleNode, single-node, multi-node]
      ClusterIdentifier: !Sub "${AWS::StackName}-${AWS::Region}-redshift-cluster"
      DBName: "warehouse"
      Encrypted: true
      MasterUsername: "warehouse"
      MasterUserPassword: "War340u5e!"
      NodeType: !Ref RedshiftNodeType
      NumberOfNodes: !Ref RedshiftNumberOfNodes
      ClusterSubnetGroupName: !Ref RedshiftClusterSubnetGroup
      VpcSecurityGroupIds:
        - !Ref SecurityGroup
        - !GetAtt VPC.DefaultSecurityGroup
      PubliclyAccessible: true
      AvailabilityZone: !GetAtt Subnet.AvailabilityZone

  ############
  # Instance #
  ############

  InstanceRole:
    Type: AWS::IAM::Role
    Condition: EC2InstanceEnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
                - !Sub "elasticmapreduce.${AWS::URLSuffix}"
                - !Sub "iam.${AWS::URLSuffix}"
                - !Sub "s3.${AWS::URLSuffix}"
                - !Sub "sqs.${AWS::URLSuffix}"
                - !Sub "logs.${AWS::Region}.${AWS::URLSuffix}"
                - !Sub "autoscaling.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforDataPipelineRole

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: EC2InstanceEnabled
    Properties:
      Roles:
        - !Ref InstanceRole

  Instance:
    Type: AWS::EC2::Instance
    Condition: EC2InstanceEnabled
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap
        - AMIs
        - !Ref AWS::Region
        - PV64Instance
      SecurityGroupIds:
        - !Ref SecurityGroup
        - !GetAtt VPC.DefaultSecurityGroup
      SubnetId: !Ref Subnet
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            set -x -e

            # Install task runner
            aws s3 cp "s3://datapipeline-us-east-1/us-east-1/software/latest/TaskRunner/TaskRunner-1.0.jar" "${!HOME}/TaskRunner-1.0.jar"
            nohup java -jar "${!HOME}/TaskRunner-1.0.jar" --workerGroup="${AWS::StackName}-${AWS::Region}-instance-worker-group" --region="${AWS::Region}" --logUri="s3://${Bucket}/logs/task-runner/instance/" &

  #######
  # EMR #
  #######

  EMRJobFlowRole:
    Type: AWS::IAM::Role
    Condition: EMREnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
                - !Sub "elasticmapreduce.${AWS::URLSuffix}"
                - !Sub "iam.${AWS::URLSuffix}"
                - !Sub "s3.${AWS::URLSuffix}"
                - !Sub "sqs.${AWS::URLSuffix}"
                - !Sub "logs.${AWS::Region}.${AWS::URLSuffix}"
                - !Sub "autoscaling.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforDataPipelineRole
      Policies:
        - PolicyName: JobFlow
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - cloudwatch:*
                  - dynamodb:*
                  - ec2:Describe*
                  - elasticmapreduce:Describe*
                  - elasticmapreduce:ListBootstrapActions
                  - elasticmapreduce:ListClusters
                  - elasticmapreduce:ListInstanceGroups
                  - elasticmapreduce:ListInstances
                  - elasticmapreduce:ListSteps
                  - kinesis:CreateStream
                  - kinesis:DeleteStream
                  - kinesis:DescribeStream
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:MergeShards
                  - kinesis:PutRecord
                  - kinesis:SplitShard
                  - rds:Describe*
                  - s3:*
                  - sdb:*
                  - sns:*
                  - sqs:*
                  - glue:CreateDatabase
                  - glue:UpdateDatabase
                  - glue:DeleteDatabase
                  - glue:GetDatabase
                  - glue:GetDatabases
                  - glue:CreateTable
                  - glue:UpdateTable
                  - glue:DeleteTable
                  - glue:GetTable
                  - glue:GetTables
                  - glue:GetTableVersions
                  - glue:CreatePartition
                  - glue:BatchCreatePartition
                  - glue:UpdatePartition
                  - glue:DeletePartition
                  - glue:BatchDeletePartition
                  - glue:GetPartition
                  - glue:GetPartitions
                  - glue:BatchGetPartition
                  - glue:CreateUserDefinedFunction
                  - glue:UpdateUserDefinedFunction
                  - glue:DeleteUserDefinedFunction
                  - glue:GetUserDefinedFunction
                  - glue:GetUserDefinedFunctions
                Effect: Allow
                Resource: "*"
              - Action:
                  - cloudwatch:*
                  - datapipeline:*
                  - dynamodb:*
                  - ec2:Describe*
                  - elasticmapreduce:AddJobFlowSteps
                  - elasticmapreduce:Describe*
                  - elasticmapreduce:ListInstance*
                  - rds:Describe*
                  - redshift:DescribeClusters
                  - redshift:DescribeClusterSecurityGroups
                  - s3:*
                  - sdb:*
                  - sns:*
                  - sqs:*
                Effect: Allow
                Resource: "*"

  EMRProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: EMREnabled
    Properties:
      Roles:
        - !Ref EMRJobFlowRole

  EMRServiceRole:
    Type: AWS::IAM::Role
    Condition: EMREnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
                - !Sub "elasticmapreduce.${AWS::URLSuffix}"
                - !Sub "iam.${AWS::URLSuffix}"
                - !Sub "s3.${AWS::URLSuffix}"
                - !Sub "sqs.${AWS::URLSuffix}"
                - !Sub "logs.${AWS::Region}.${AWS::URLSuffix}"
                - !Sub "autoscaling.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole
      Policies:
        - PolicyName: Service
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CancelSpotInstanceRequests
                  - ec2:CreateNetworkInterface
                  - ec2:CreateSecurityGroup
                  - ec2:CreateTags
                  - ec2:DeleteNetworkInterface
                  - ec2:DeleteSecurityGroup
                  - ec2:DeleteTags
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeAccountAttributes
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeImages
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeInstances
                  - ec2:DescribeKeyPairs
                  - ec2:DescribeNetworkAcls
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribePrefixLists
                  - ec2:DescribeRouteTables
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSpotInstanceRequests
                  - ec2:DescribeSpotPriceHistory
                  - ec2:DescribeSubnets
                  - ec2:DescribeTags
                  - ec2:DescribeVpcAttribute
                  - ec2:DescribeVpcEndpoints
                  - ec2:DescribeVpcEndpointServices
                  - ec2:DescribeVpcs
                  - ec2:DetachNetworkInterface
                  - ec2:ModifyImageAttribute
                  - ec2:ModifyInstanceAttribute
                  - ec2:RequestSpotInstances
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RunInstances
                  - ec2:TerminateInstances
                  - ec2:DeleteVolume
                  - ec2:DescribeVolumeStatus
                  - ec2:DescribeVolumes
                  - ec2:DetachVolume
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:ListInstanceProfiles
                  - iam:ListRolePolicies
                  - iam:PassRole
                  - s3:CreateBucket
                  - s3:Get*
                  - s3:List*
                  - sdb:BatchPutAttributes
                  - sdb:Select
                  - sqs:CreateQueue
                  - sqs:Delete*
                  - sqs:GetQueue*
                  - sqs:PurgeQueue
                  - sqs:ReceiveMessage
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:DeleteAlarms
                  - application-autoscaling:RegisterScalableTarget
                  - application-autoscaling:DeregisterScalableTarget
                  - application-autoscaling:PutScalingPolicy
                  - application-autoscaling:DeleteScalingPolicy
                  - application-autoscaling:Describe*
                Effect: Allow
                Resource: "*"

  EMR:
    Type: AWS::EMR::Cluster
    Condition: EMREnabled
    Properties:
      Applications:
        - Name: hive
        - Name: pig
        - Name: spark
      BootstrapActions:
        - Name: Install Task Runner
          ScriptBootstrapAction:
            Path: "s3://elasticmapreduce/bootstrap-actions/run-if"
            Args:
              - instance.isMaster=true
              - !Sub "s3n://${CodeBucket}/${CodePrefix}/scripts/emr/install_task_runner.sh"
              - !Sub "${AWS::StackName}-${AWS::Region}-emr-worker-group"
              - !Ref AWS::Region
              - !Sub "s3://${Bucket}/logs/task-runner/emr/"
      Instances:
        AdditionalMasterSecurityGroups:
          - !Ref SecurityGroup
          - !GetAtt VPC.DefaultSecurityGroup
        AdditionalSlaveSecurityGroups:
          - !Ref SecurityGroup
          - !GetAtt VPC.DefaultSecurityGroup
        Ec2SubnetId: !Ref Subnet
        MasterInstanceGroup:
          InstanceCount: !Ref EMRMasterInstanceCount
          InstanceType: !Ref EMRMasterInstanceType
        CoreInstanceGroup:
          InstanceCount: !Ref EMRCoreInstanceCount
          InstanceType: !Ref EMRCoreInstanceType
        TerminationProtected: false
      JobFlowRole: !Ref EMRProfile
      Name: !Sub "${AWS::StackName}-${AWS::Region}-warehouse-emr-cluster"
      ReleaseLabel: emr-5.17.0
      ServiceRole: !Ref EMRServiceRole
      LogUri: !Sub "s3://${Bucket}/logs/emr"

  ####################
  # Delivery Streams #
  ####################

  DeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "firehose.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: Execution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:PutObject*
                Effect: Allow
                Resource:
                  - !Sub "${Bucket.Arn}/data/raw/ad/impressions/*"
                  - !Sub "${Bucket.Arn}/data/raw/ad/clicks/*"

  AdImpressionsDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      S3DestinationConfiguration:
        BucketARN: !GetAtt Bucket.Arn
        Prefix: data/raw/ad/impressions/
        BufferingHints:
          IntervalInSeconds: 900
          SizeInMBs: 128
        CompressionFormat: GZIP
        RoleARN: !GetAtt DeliveryStreamRole.Arn

  AdImpressionsDeliveryStreamRecordsPerSecondAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Statistic: Average
      Namespace: "AWS/Firehose"
      MetricName: IncomingRecords
      Dimensions:
        - Name: DeliveryStreamName
          Value: !Ref AdImpressionsDeliveryStream
      ComparisonOperator: GreaterThanThreshold
      Threshold: 4000
      DatapointsToAlarm: 3
      EvaluationPeriods: 5
      Period: 60

  AdImpressionsDeliveryStreamTransactionsPerSecondAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Statistic: Average
      Namespace: "AWS/Firehose"
      MetricName: PutRecordBatch.Requests
      Dimensions:
        - Name: DeliveryStreamName
          Value: !Ref AdImpressionsDeliveryStream
      ComparisonOperator: GreaterThanThreshold
      Threshold: 1600
      DatapointsToAlarm: 3
      EvaluationPeriods: 5
      Period: 60

  AdImpressionsDeliveryStreamDataThroughputAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Statistic: Average
      Namespace: "AWS/Firehose"
      MetricName: IncomingBytes
      Dimensions:
        - Name: DeliveryStreamName
          Value: !Ref AdImpressionsDeliveryStream
      ComparisonOperator: GreaterThanThreshold
      Threshold: 4194304
      DatapointsToAlarm: 3
      EvaluationPeriods: 5
      Period: 60

  AdClicksDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      S3DestinationConfiguration:
        BucketARN: !GetAtt Bucket.Arn
        Prefix: data/raw/ad/clicks/
        BufferingHints:
          IntervalInSeconds: 900
          SizeInMBs: 128
        CompressionFormat: GZIP
        RoleARN: !GetAtt DeliveryStreamRole.Arn

  AdClicksDeliveryStreamRecordsPerSecondAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Statistic: Average
      Namespace: "AWS/Firehose"
      MetricName: IncomingRecords
      Dimensions:
        - Name: DeliveryStreamName
          Value: !Ref AdClicksDeliveryStream
      ComparisonOperator: GreaterThanThreshold
      Threshold: 4000
      DatapointsToAlarm: 3
      EvaluationPeriods: 5
      Period: 60

  AdClicksDeliveryStreamTransactionsPerSecondAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Statistic: Average
      Namespace: "AWS/Firehose"
      MetricName: PutRecordBatch.Requests
      Dimensions:
        - Name: DeliveryStreamName
          Value: !Ref AdClicksDeliveryStream
      ComparisonOperator: GreaterThanThreshold
      Threshold: 1600
      DatapointsToAlarm: 3
      EvaluationPeriods: 5
      Period: 60

  AdClicksDeliveryStreamDataThroughputAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Statistic: Average
      Namespace: "AWS/Firehose"
      MetricName: IncomingBytes
      Dimensions:
        - Name: DeliveryStreamName
          Value: !Ref AdClicksDeliveryStream
      ComparisonOperator: GreaterThanThreshold
      Threshold: 4194304
      DatapointsToAlarm: 3
      EvaluationPeriods: 5
      Period: 60

  #############
  # Real Time #
  #############

  RealTimeDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardBody: !Sub |
        {
          "start": "-PT1H",
          "periodOverride": "inherit",
          "widgets": [
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": {
                "markdown": "# Clickthrough Rate"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Clickthrough Rate"
              }
            }
          ]
        }

  ApplicationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

  AdImpressionsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bin/ad-impressions
      Role: !GetAtt ApplicationLambdaRole.Arn

  AdClicksLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bin/ad-clicks
      Role: !GetAtt ApplicationLambdaRole.Arn

  ApplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "kinesisanalytics.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonKinesisAnalyticsFullAccess
      Policies:
        - PolicyName: Execution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunctionConfiguration
                Effect: Allow
                Resource:
                  - !Ref AdImpressionsLambda.Alias
                  - !Ref AdClicksLambda.Alias
              - Action:
                  - firehose:DescribeDeliveryStream
                  - firehose:Get*
                Effect: Allow
                Resource:
                  - !GetAtt AdImpressionsDeliveryStream.Arn
                  - !GetAtt AdClicksDeliveryStream.Arn

  AdImpressionsApplication:
    Type: AWS::KinesisAnalytics::Application
    Properties:
      ApplicationCode: |
        CREATE OR REPLACE STREAM "IMPRESSIONS_OUTPUT" (
          ad_id VARCHAR(255),
          user_id VARCHAR(255),
          viewed_at TIMESTAMP
        );

        CREATE OR REPLACE PUMP "IMPRESSIONS_OUTPUT_PUMP" AS
        INSERT INTO "IMPRESSIONS_OUTPUT"
        SELECT ad_id, user_id, viewed_at
        FROM "AD_IMPRESSIONS_001"
        WINDOWED BY STAGGER (
          PARTITION BY ad_id, user_id
          RANGE INTERVAL '1' MINUTE
        );
      Inputs:
        - NamePrefix: AD_IMPRESSIONS
          KinesisFirehoseInput:
            ResourceARN: !GetAtt AdImpressionsDeliveryStream.Arn
            RoleARN: !GetAtt ApplicationRole.Arn
          InputSchema:
            RecordFormat:
              RecordFormatType: JSON
              MappingParameters:
                JSONMappingParameters:
                  RecordRowPath: "$"
            RecordColumns:
              - Name: ad_id
                SqlType: VARCHAR(255)
                Mapping: "$.ad"
              - Name: user_id
                SqlType: VARCHAR(255)
                Mapping: "$.user"
              - Name: viewed_at
                SqlType: TIMESTAMP
                Mapping: "$.at"

  AdImpressionsOutputs:
    Type: AWS::KinesisAnalytics::ApplicationOutput
    Properties:
      ApplicationName: !Ref AdImpressionsApplication
      Output:
        Name: IMPRESSIONS_OUTPUT
        DestinationSchema:
          RecordFormatType: JSON
        LambdaOutput:
          ResourceARN: !Ref AdImpressionsLambda.Alias
          RoleARN: !GetAtt ApplicationRole.Arn

  AdClicksApplication:
    Type: AWS::KinesisAnalytics::Application
    Properties:
      ApplicationCode: |
        CREATE OR REPLACE STREAM "CLICKS_OUTPUT" (
          ad_id VARCHAR(255),
          user_id VARCHAR(255),
          clicked_at TIMESTAMP
        );

        CREATE OR REPLACE PUMP "CLICKS_OUTPUT_PUMP" AS
        INSERT INTO "CLICKS_OUTPUT"
        SELECT ad_id, user_id, clicked_at
        FROM "AD_CLICKS_001"
        WINDOWED BY STAGGER (
          PARTITION BY ad_id, user_id
          RANGE INTERVAL '1' MINUTE
        );
      Inputs:
        - NamePrefix: AD_CLICKS
          KinesisFirehoseInput:
            ResourceARN: !GetAtt AdClicksDeliveryStream.Arn
            RoleARN: !GetAtt ApplicationRole.Arn
          InputSchema:
            RecordFormat:
              RecordFormatType: JSON
              MappingParameters:
                JSONMappingParameters:
                  RecordRowPath: "$"
            RecordColumns:
              - Name: ad_id
                SqlType: VARCHAR(255)
                Mapping: "$.ad"
              - Name: user_id
                SqlType: VARCHAR(255)
                Mapping: "$.user"
              - Name: clicked_at
                SqlType: TIMESTAMP
                Mapping: "$.at"

  AdClicksOutputs:
    Type: AWS::KinesisAnalytics::ApplicationOutput
    Properties:
      ApplicationName: !Ref AdClicksApplication
      Output:
        Name: CLICKS_OUTPUT
        DestinationSchema:
          RecordFormatType: JSON
        LambdaOutput:
          ResourceARN: !Ref AdClicksLambda.Alias
          RoleARN: !GetAtt ApplicationRole.Arn

  #######
  # API #
  #######

  APIRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "apigateway.${AWS::URLSuffix}"
      Policies:
        - PolicyName: Execution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - firehose:PutRecordBatch
                Effect: Allow
                Resource:
                  - !GetAtt AdImpressionsDeliveryStream.Arn
                  - !GetAtt AdClicksDeliveryStream.Arn

  API:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          # LoggingLevel: "ERROR"
          MetricsEnabled: true
      TracingEnabled: true
      DefinitionBody:
        openapi: 3.0.0
        info:
          version: 0.1.0
          title: Warehouse Service
        paths:
          /data/ad/impressions:
            post:
              summary: Record a batch of ad impressions
              operationId: data-ad-impressions
              requestBody:
                description: A batch of ad impressions
                required: true
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/DataAdImpressions"
              x-amazon-apigateway-integration:
                type: AWS
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:firehose:action/PutRecordBatch"
                credentials: !GetAtt APIRole.Arn
                requestTemplates:
                  application/json: !Sub |
                    #set($newline = "
                    ")
                    {
                      "DeliveryStreamName": "${AdImpressionsDeliveryStream}",
                      "Records": [
                        #foreach($elem in $input.path('$.impressions'))
                        #set($val = $input.json("$.impressions[$foreach.index]"))
                        #set($rec = "${!val}${!newline}")
                        { "Data": "$util.base64Encode($rec)" }#if($foreach.hasNext),#end
                        #end
                      ]
                    }
                requestParameters:
                  integration.request.header.Content-Type: "'x-amz-json-1.1'"
                responses:
                  '200':
                    statusCode: 200
                    responseTemplates:
                      application/json: |
                        {
                          "failed_count": $input.path("$.FailedPutCount"),
                          "records": [
                            #foreach($record in $input.path("$.RequestResponses"))
                            {
                              #if($record.keySet().contains("ErrorCode"))
                              "failed": true,
                              "error_code": "$record.ErrorCode",
                              "error_message": "$record.ErrorMessage"
                              #else
                              "failed": false
                              #end
                            }#if($foreach.hasNext),#end
                            #end
                          ]
                        }
              responses:
                '200':
                  description: |
                    The batch was processed.  Some impressions may not have
                    been processed.  The response contains a list of
                    impressions in the same order submitted, indicating which
                    succeeded and which failed.
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/BatchWriteResponse"
          /data/ad/clicks:
            post:
              summary: Record a batch of ad clicks
              operationId: data-ad-clicks
              requestBody:
                description: A batch of ad clicks
                required: true
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/DataAdClicks"
              x-amazon-apigateway-integration:
                type: AWS
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:firehose:action/PutRecordBatch"
                credentials: !GetAtt APIRole.Arn
                requestTemplates:
                  application/json: !Sub |
                    #set($newline = "
                    ")
                    {
                      "DeliveryStreamName": "${AdClicksDeliveryStream}",
                      "Records": [
                        #foreach($elem in $input.path('$.clicks'))
                        #set($val = $input.json("$.clicks[$foreach.index]"))
                        #set($rec = "${!val}${!newline}")
                        { "Data": "$util.base64Encode($rec)" }#if($foreach.hasNext),#end
                        #end
                      ]
                    }
                requestParameters:
                  integration.request.header.Content-Type: "'x-amz-json-1.1'"
                responses:
                  '200':
                    statusCode: 200
                    responseTemplates:
                      application/json: |
                        {
                          "failed_count": $input.path("$.FailedPutCount"),
                          "records": [
                            #foreach($record in $input.path("$.RequestResponses"))
                            {
                              #if($record.keySet().contains("ErrorCode"))
                              "failed": true,
                              "error_code": "$record.ErrorCode",
                              "error_message": "$record.ErrorMessage"
                              #else
                              "failed": false
                              #end
                            }#if($foreach.hasNext),#end
                            #end
                          ]
                        }
              responses:
                '200':
                  description: |
                    The batch was processed.  Some clicks may not have been
                    processed.  The response contains a list of clicks in the same
                    order submitted, indicating which succeeded and which failed.
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/BatchWriteResponse"
        x-amazon-apigateway-request-validators:
          all:
            validateRequestBody: true
            validateRequestParameters: true
        x-amazon-apigateway-request-validator: all
        components:
          schemas:
            DataAdImpressions:
              type: object
              properties:
                impressions:
                  type: array
                  items:
                    $ref: "#/components/schemas/DataAdImpression"
                  minItems: 1
                  maxItems: 500
              required:
                - impressions
              additionalProperties: false
            DataAdImpression:
              type: object
              properties:
                at:
                  type: string
                  format: timestamp
                user:
                  type: string
                  format: uuid
                ad:
                  type: string
                  format: uuid
              required:
                - at
                - user
                - ad
              additionalProperties: false
            DataAdClicks:
              type: object
              properties:
                clicks:
                  type: array
                  items:
                    $ref: "#/components/schemas/DataAdClick"
                  minItems: 1
                  maxItems: 500
              required:
                - clicks
              additionalProperties: false
            DataAdClick:
              type: object
              properties:
                at:
                  type: string
                  format: timestamp
                user:
                  type: string
                  format: uuid
                ad:
                  type: string
                  format: uuid
              required:
                - at
                - user
                - ad
              additionalProperties: false
            BatchWriteResponse:
              type: object
              properties:
                records:
                  type: array
                  items:
                    $ref: "#/components/schemas/BatchWriteRecord"
                  minItems: 1
                  maxItems: 500
              required:
                - records
              additionalProperties: false
            BatchWriteRecord:
              type: object
              properties:
                failed:
                  type: boolean
                error_code:
                  type: string
                error_message:
                  type: string
              required:
                - failed
              additionalProperties: false
            Error:
              type: object
              properties:
                code:
                  type: integer
                  format: int32
                message:
                  type: string
              required:
                - code
                - message
              additionalProperties: false

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Condition: DNSEnabled
    Properties:
      DomainName: !Ref DNSName
      DomainValidationOptions:
        - DomainName: !Ref DNSName
          ValidationDomain: !Ref ValidationDomain

  DomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: DNSEnabled
    Properties:
      CertificateArn: !Ref Certificate
      DomainName: !Ref DNSName

  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: DNSEnabled
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !Ref API
      Stage: !Ref API.Stage

  #######
  # DNS #
  #######

  HostedZone:
    Type: AWS::Route53::HostedZone
    Condition: InternalHostedZone
    Properties:
      Name: !Ref DNSDomainName

  RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Condition: DNSEnabled
    Properties:
      HostedZoneId: !If [InternalHostedZone, !Ref HostedZone, !Ref HostedZoneID]
      RecordSets:
        - Type: A
          Name: !Ref DNSName
          AliasTarget:
            DNSName: !GetAtt DomainName.DistributionDomainName
            HostedZoneId: Z2FDTNDATAQYW2

  #############
  # Data Lake #
  #############

  Database:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: warehouse

  CrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "glue.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: Execution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:GetObject*
                  - s3:PutObject*
                Effect: Allow
                Resource:
                  - !Sub "${Bucket.Arn}/data/raw/ad/impressions/*"
                  - !Sub "${Bucket.Arn}/data/raw/ad/clicks/*"
              - Action:
                  - s3:ListBucket*
                Effect: Allow
                Resource:
                  - !GetAtt Bucket.Arn

  RawAdCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: raw_ad_crawler
      Description: Crawls the raw data
      Role: !GetAtt CrawlerRole.Arn
      DatabaseName: !Ref Database
      Targets: # CloudFormation does not seem to support targeting an existing table.  Console does, at least.
        S3Targets:
          - Path: !Sub "s3://${Bucket}/data/raw/ad/impressions/"
          - Path: !Sub "s3://${Bucket}/data/raw/ad/clicks/"
      TablePrefix: raw_ad_
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: LOG
      Schedule:
        ScheduleExpression: cron(20 * * * ? *)
      Configuration: |
        {
          "Version": 1.0,
          "Grouping": {
            "TableGroupingPolicy": "CombineCompatibleSchemas"
          },
          "CrawlerOutput": {
            "Partitions": {
              "AddOrUpdateBehavior": "InheritFromTable"
            },
            "Tables": {
              "AddOrUpdateBehavior": "MergeNewColumns"
            }
          }
        }

  AdImpressionsTable:
    Type: AWS::Glue::Table
    DependsOn:
      - Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref Database
      TableInput:
          Name: ad_impressions
          Description: Ad Impressions
          TableType: EXTERNAL_TABLE
          Parameters:
            classification: orc
          PartitionKeys:
            - Name: year
              Type: int
            - Name: month
              Type: int
          StorageDescriptor:
            Location: !Sub "s3://${Bucket}/data/lake/ad/impressions/"
            StoredAsSubDirectories: true
            InputFormat: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
            SerdeInfo:
              SerializationLibrary: org.apache.hadoop.hive.ql.io.orc.OrcSerde
            OutputFormat: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
            Columns:
              - Name: user
                Type: string
              - Name: ad
                Type: string
              - Name: at
                Type: timestamp

  AdClicksTable:
    Type: AWS::Glue::Table
    DependsOn:
      - Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref Database
      TableInput:
          Name: ad_clicks
          Description: Ad Clicks
          TableType: EXTERNAL_TABLE
          Parameters:
            classification: orc
          PartitionKeys:
            - Name: year
              Type: int
            - Name: month
              Type: int
          StorageDescriptor:
            Location: !Sub "s3://${Bucket}/data/lake/ad/clicks/"
            StoredAsSubDirectories: true
            InputFormat: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
            SerdeInfo:
              SerializationLibrary: org.apache.hadoop.hive.ql.io.orc.OrcSerde
            OutputFormat: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
            Columns:
              - Name: user
                Type: string
              - Name: ad
                Type: string
              - Name: at
                Type: timestamp

  ETLJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "glue.${AWS::URLSuffix}"
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "*"
                Effect: Allow
                Resource: "*"

  AdImpressionsPythonJob:
    Type: AWS::Glue::Job
    Properties:
      Role: !GetAtt ETLJobRole.Arn
      Command:
        Name: glueetl
        ScriptLocation: !Sub "s3://${CodeBucket}/${CodePrefix}/scripts/glue/ad_impressions_etl.py"
      DefaultArguments:
        "--enable-glue-datacatalog": ""
        "--job-bookmark-option": "job-bookmark-enable"
        "--database_name": !Ref Database
        "--raw_table_name": raw_ad_impressions # Hard-coded because CloudFormation-based Crawlers can't crawl an existing table
        "--table_name": !Ref AdImpressionsTable
      ExecutionProperty:
        MaxConcurrentRuns: 1
      MaxRetries: 0

  AdImpressionsScalaJob:
    Type: AWS::Glue::Job
    Properties:
      Role: !GetAtt ETLJobRole.Arn
      Command:
        Name: glueetl
        ScriptLocation: !Sub "s3://${CodeBucket}/${CodePrefix}/scripts/glue/ad_impressions_etl.scala"
      DefaultArguments:
        "--job-language": scala
        "--class": GlueApp
        "--enable-glue-datacatalog": ""
        "--job-bookmark-option": "job-bookmark-enable"
        "--database_name": !Ref Database
        "--raw_table_name": raw_ad_impressions # Hard-coded because CloudFormation-based Crawlers can't crawl an existing table
        "--table_name": !Ref AdImpressionsTable
      ExecutionProperty:
        MaxConcurrentRuns: 1
      MaxRetries: 0

  AdClicksPythonJob:
    Type: AWS::Glue::Job
    Properties:
      Role: !GetAtt ETLJobRole.Arn
      Command:
        Name: glueetl
        ScriptLocation: !Sub "s3://${CodeBucket}/${CodePrefix}/scripts/glue/ad_clicks_etl.py"
      DefaultArguments:
        "--enable-glue-datacatalog": ""
        "--job-bookmark-option": "job-bookmark-enable"
        "--database_name": !Ref Database
        "--raw_table_name": raw_ad_clicks # Hard-coded because CloudFormation-based Crawlers can't crawl an existing table
        "--table_name": !Ref AdClicksTable
      ExecutionProperty:
        MaxConcurrentRuns: 1
      MaxRetries: 0

  AdClicksScalaJob:
    Type: AWS::Glue::Job
    Properties:
      Role: !GetAtt ETLJobRole.Arn
      Command:
        Name: glueetl
        ScriptLocation: !Sub "s3://${CodeBucket}/${CodePrefix}/scripts/glue/ad_clicks_etl.scala"
      DefaultArguments:
        "--job-language": scala
        "--class": GlueApp
        "--enable-glue-datacatalog": ""
        "--job-bookmark-option": "job-bookmark-enable"
        "--database_name": !Ref Database
        "--raw_table_name": raw_ad_clicks # Hard-coded because CloudFormation-based Crawlers can't crawl an existing table
        "--table_name": !Ref AdClicksTable
      ExecutionProperty:
        MaxConcurrentRuns: 1
      MaxRetries: 0

  #################
  # Ops Dashboard #
  #################

  OpsDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardBody: !Sub |
        {
          "start": "-PT1H",
          "periodOverride": "inherit",
          "widgets": [
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Beacon Endpoints" }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/ApiGateway", "Count", "ApiName", "Warehouse Service", "Stage", "${Stage}"]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Ad Impressions Request Rate"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/ApiGateway", "Latency", "ApiName", "Warehouse Service", "Stage", "${Stage}", { "stat": "p50" }],
                  [".",              ".",       ".",       "Warehouse Service", ".",     "${Stage}", { "stat": "p75" }],
                  [".",              ".",       ".",       "Warehouse Service", ".",     "${Stage}", { "stat": "p95" }],
                  [".",              ".",       ".",       "Warehouse Service", ".",     "${Stage}", { "stat": "p98" }],
                  [".",              ".",       ".",       "Warehouse Service", ".",     "${Stage}", { "stat": "p99" }]
                ],
                "period": 60,
                "region": "${AWS::Region}",
                "title": "Ad Impressions Latency"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/ApiGateway", "IntegrationLatency", "ApiName", "Warehouse Service", "Stage", "${Stage}", { "stat": "p50" }],
                  [".",              ".",                  ".",       "Warehouse Service", ".",     "${Stage}", { "stat": "p75" }],
                  [".",              ".",                  ".",       "Warehouse Service", ".",     "${Stage}", { "stat": "p95" }],
                  [".",              ".",                  ".",       "Warehouse Service", ".",     "${Stage}", { "stat": "p98" }],
                  [".",              ".",                  ".",       "Warehouse Service", ".",     "${Stage}", { "stat": "p99" }]
                ],
                "period": 60,
                "region": "${AWS::Region}",
                "title": "Ad Impressions Integration Latency"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/ApiGateway", "4XXError", "ApiName", "Warehouse Service", "Stage", "${Stage}"],
                  [".",              "5XXError", ".",       "Warehouse Service", ".",     "${Stage}"]
                ],
                "period": 60,
                "region": "${AWS::Region}",
                "title": "Ad Impressions Errors"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/ApiGateway", "Count", "ApiName", "Warehouse Service", "Stage", "${Stage}"]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Ad Clicks Request Rate"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/ApiGateway", "Latency", "ApiName", "Warehouse Service", "Stage", "${Stage}", { "stat": "p50" }],
                  [".",              ".",       ".",       "Warehouse Service", ".",     "${Stage}", { "stat": "p75" }],
                  [".",              ".",       ".",       "Warehouse Service", ".",     "${Stage}", { "stat": "p95" }],
                  [".",              ".",       ".",       "Warehouse Service", ".",     "${Stage}", { "stat": "p98" }],
                  [".",              ".",       ".",       "Warehouse Service", ".",     "${Stage}", { "stat": "p99" }]
                ],
                "period": 60,
                "region": "${AWS::Region}",
                "title": "Ad Clicks Latency"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/ApiGateway", "IntegrationLatency", "ApiName", "Warehouse Service", "Stage", "${Stage}", { "stat": "p50" }],
                  [".",              ".",                  ".",       "Warehouse Service", ".",     "${Stage}", { "stat": "p75" }],
                  [".",              ".",                  ".",       "Warehouse Service", ".",     "${Stage}", { "stat": "p95" }],
                  [".",              ".",                  ".",       "Warehouse Service", ".",     "${Stage}", { "stat": "p98" }],
                  [".",              ".",                  ".",       "Warehouse Service", ".",     "${Stage}", { "stat": "p99" }]
                ],
                "period": 60,
                "region": "${AWS::Region}",
                "title": "Ad Clicks Integration Latency"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/ApiGateway", "4XXError", "ApiName", "Warehouse Service", "Stage", "${Stage}"],
                  [".",              "5XXError", ".",       "Warehouse Service", ".",     "${Stage}"]
                ],
                "period": 60,
                "region": "${AWS::Region}",
                "title": "Ad Clicks Errors"
              }
            },
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Firehoses" }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Firehose", "IncomingRecords", "DeliveryStreamName", "${AdImpressionsDeliveryStream}"],
                  ["AWS/Firehose", "IncomingRecords", "DeliveryStreamName", "${AdClicksDeliveryStream}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Incoming Records"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Firehose", "IncomingBytes", "DeliveryStreamName", "${AdImpressionsDeliveryStream}"],
                  ["AWS/Firehose", "IncomingBytes", "DeliveryStreamName", "${AdClicksDeliveryStream}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Incoming Bytes"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Firehose", "DeliveryToS3.Success", "DeliveryStreamName", "${AdImpressionsDeliveryStream}"],
                  ["AWS/Firehose", "DeliveryToS3.Success", "DeliveryStreamName", "${AdClicksDeliveryStream}"]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Delivery To S3 Success"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Firehose", "DeliveryToS3.Records", "DeliveryStreamName", "${AdImpressionsDeliveryStream}"],
                  ["AWS/Firehose", "DeliveryToS3.Records", "DeliveryStreamName", "${AdClicksDeliveryStream}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Delivery To S3 Records"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Firehose", "DeliveryToS3.Bytes", "DeliveryStreamName", "${AdImpressionsDeliveryStream}"],
                  ["AWS/Firehose", "DeliveryToS3.Bytes", "DeliveryStreamName", "${AdClicksDeliveryStream}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Delivery To S3 Bytes"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Firehose", "DeliveryToS3.DataFreshness", "DeliveryStreamName", "${AdImpressionsDeliveryStream}"],
                  ["AWS/Firehose", "DeliveryToS3.DataFreshness", "DeliveryStreamName", "${AdClicksDeliveryStream}"]
                ],
                "period": 60,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Delivery To S3 Data Freshness"
              }
            },
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Real-Time App" }
            },
            {
              "type": "metric",
              "width": 24,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "Success", "Application", "${AdImpressionsApplication}"],
                  ["AWS/KinesisAnalytics", "Success", "Application", "${AdClicksApplication}"]
                ],
                "period": 60,
                "region": "${AWS::Region}",
                "title": "Success"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "KPUs", "Application", "${AdImpressionsApplication}"],
                  ["AWS/KinesisAnalytics", "KPUs", "Application", "${AdClicksApplication}"]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "KPUs"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "MillisBehindLatest", "Application", "${AdImpressionsApplication}"],
                  ["AWS/KinesisAnalytics", "MillisBehindLatest", "Application", "${AdClicksApplication}"]
                ],
                "period": 60,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Lag (ms)"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "Records", "Application", "${AdImpressionsApplication}"],
                  ["AWS/KinesisAnalytics", "Records", "Application", "${AdClicksApplication}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Records Processed"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "Bytes", "Application", "${AdImpressionsApplication}"],
                  ["AWS/KinesisAnalytics", "Bytes", "Application", "${AdClicksApplication}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Bytes Processed"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "InputProcessing.Success", "Application", "${AdImpressionsApplication}"],
                  ["AWS/KinesisAnalytics", "InputProcessing.Success", "Application", "${AdClicksApplication}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Input Processing Success"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "InputProcessing.OkBytes", "Application", "${AdImpressionsApplication}"],
                  ["AWS/KinesisAnalytics", "InputProcessing.OkBytes", "Application", "${AdClicksApplication}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Input Processing Bytes"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "InputProcessing.Duration", "Application", "${AdImpressionsApplication}"],
                  ["AWS/KinesisAnalytics", "InputProcessing.Duration", "Application", "${AdImpressionsApplication}"],
                  ["AWS/KinesisAnalytics", "InputProcessing.Duration", "Application", "${AdClicksApplication}"]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Input Processing Duration"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "InputProcessing.OkRecords", "Application", "${AdImpressionsApplication}"],
                  ["AWS/KinesisAnalytics", "InputProcessing.OkRecords", "Application", "${AdClicksApplication}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Input Processing Successful Records"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "InputProcessing.DroppedRecords", "Application", "${AdImpressionsApplication}"],
                  ["AWS/KinesisAnalytics", "InputProcessing.DroppedRecords", "Application", "${AdClicksApplication}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Input Processing Dropped Records"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "InputProcessing.ProcessingFailedRecords", "Application", "${AdImpressionsApplication}"],
                  ["AWS/KinesisAnalytics", "InputProcessing.ProcessingFailedRecords", "Application", "${AdClicksApplication}"]
                ],
                "period": 60,
                "stat": "sum",
                "region": "${AWS::Region}",
                "title": "Input Processing Failed Records"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "LambdaDelivery.OkRecords", "Application", "${AdImpressionsApplication}"],
                  ["AWS/KinesisAnalytics", "LambdaDelivery.OkRecords", "Application", "${AdClicksApplication}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Delivery Success"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "LambdaDelivery.DeliveryFailedRecords", "Application", "${AdImpressionsApplication}"],
                  ["AWS/KinesisAnalytics", "LambdaDelivery.DeliveryFailedRecords", "Application", "${AdClicksApplication}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Delivery Failures"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "LambdaDelivery.Duration", "Application", "${AdImpressionsApplication}"],
                  ["AWS/KinesisAnalytics", "LambdaDelivery.Duration", "Application", "${AdClicksApplication}"]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Lambda Delivery Duration"
              }
            },
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Lambas" }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Invocations", "FunctionName", "${AdImpressionsLambda}"],
                  ["AWS/Lambda", "Invocations", "FunctionName", "${AdClicksLambda}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Invocations"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Duration", "FunctionName", "${AdImpressionsLambda}", { "stat": "p50" }],
                  ["AWS/Lambda", "Duration", "FunctionName", "${AdImpressionsLambda}", { "stat": "p75" }],
                  ["AWS/Lambda", "Duration", "FunctionName", "${AdImpressionsLambda}", { "stat": "p95" }],
                  ["AWS/Lambda", "Duration", "FunctionName", "${AdImpressionsLambda}", { "stat": "p98" }],
                  ["AWS/Lambda", "Duration", "FunctionName", "${AdImpressionsLambda}", { "stat": "p99" }],
                  ["AWS/Lambda", "Duration", "FunctionName", "${AdClicksLambda}", { "stat": "p50" }],
                  ["AWS/Lambda", "Duration", "FunctionName", "${AdClicksLambda}", { "stat": "p75" }],
                  ["AWS/Lambda", "Duration", "FunctionName", "${AdClicksLambda}", { "stat": "p95" }],
                  ["AWS/Lambda", "Duration", "FunctionName", "${AdClicksLambda}", { "stat": "p98" }],
                  ["AWS/Lambda", "Duration", "FunctionName", "${AdClicksLambda}", { "stat": "p99" }]
                ],
                "period": 60,
                "region": "${AWS::Region}",
                "title": "Lambda Duration"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Errors", "FunctionName", "${AdImpressionsLambda}"],
                  ["AWS/Lambda", "Errors", "FunctionName", "${AdClicksLambda}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Errors"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "DeadLetterErrors", "FunctionName", "${AdImpressionsLambda}"],
                  ["AWS/Lambda", "DeadLetterErrors", "FunctionName", "${AdClicksLambda}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Dead Letter Errors"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "ConcurrentExecutions", "FunctionName", "${AdImpressionsLambda}"],
                  ["AWS/Lambda", "ConcurrentExecutions", "FunctionName", "${AdClicksLambda}"]
                ],
                "period": 60,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Lambda Concurrent Executions"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "UnreservedConcurrentExecutions", "FunctionName", "${AdImpressionsLambda}"],
                  ["AWS/Lambda", "UnreservedConcurrentExecutions", "FunctionName", "${AdClicksLambda}"]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Lambda Unreserved Concurrent Executions"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Throttles", "FunctionName", "${AdImpressionsLambda}"],
                  ["AWS/Lambda", "Throttles", "FunctionName", "${AdClicksLambda}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Throttles"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "IteratorAge", "FunctionName", "${AdImpressionsLambda}"],
                  ["AWS/Lambda", "IteratorAge", "FunctionName", "${AdClicksLambda}"]
                ],
                "period": 60,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Lambda Iterator Age"
              }
            },
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Data Lake" }
            },
            {
              "type": "metric",
              "width": 12,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/S3", "BucketSizeBytes", "BucketName", "${Bucket}"]
                ],
                "period": 86400,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Bucket Size (bytes)"
              }
            },
            {
              "type": "metric",
              "width": 12,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/S3", "NumberOfObject", "BucketName", "${Bucket}"]
                ],
                "period": 86400,
                "stat": "Maximum"
                "region": "${AWS::Region}",
                "title": "Bucket Size (objects)"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/S3", "AllRequests", "BucketName", "${Bucket}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "All Requests"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/S3", "GetRequests", "BucketName", "${Bucket}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Get Requests"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/S3", "PutRequests", "BucketName", "${Bucket}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Put Requests"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/S3", "SelectRequests", "BucketName", "${Bucket}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Select Requests"
              }
            },
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Athena" }
            },
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Glue ETL Jobs" }
            }
          ]
        }
