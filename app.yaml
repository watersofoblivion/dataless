AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: Build Info
        Parameters:
          - CodePipeline
          - BuildRegion
          - SourceVersion
          - Build
      - Label: Code Location
        Parameters:
          - CodeBucket
          - CodePrefix
      - Label: EC2
        Parameters:
          - KeyPair
      - Label: Deployment Configuration
        Parameters:
          - Stage
          - DeploymentPreference
      - Label: DNS
        Parameters:
          - DNSDomainName
          - DNSName
          - ValidationDomain
          - HostedZoneID
      - Label: VPC
        Parameters:
          - EnableVPC
      - Label: Task Runner
        Parameters:
          - AccessKeyID
          - SecretAccessKey
      - Label: EC2 Instance
        Parameters:
          - EnableEC2Instance
          - EC2InstanceSize
      - Label: EMR Cluster
        Parameters:
          - EnableEMRCluster
          - EMRRelease
          - EMRMasterInstanceType
          - EMRMasterInstanceCount
          - EMRCoreInstanceType
          - EMRCoreInstanceCount
      - Label: Redshift
        Parameters:
          - EnableRedshift
          - RedshiftNodeType
          - RedshiftNumberOfNodes
          - RedshiftDatabase
          - RedshiftUsername
          - RedshiftPassword
    ParameterLabels:
      CodePipeline:
        default: The CodePipeline pipeline that build this app
      BuildRegion:
        default: The region the app was built in
      SourceVersion:
        default: The source version built
      Build:
        default: The unique build ID
      CodeBucket:
        default: Bucket containing scripts
      CodePrefix:
        default: Prefix for scripts
      KeyPair:
        default: EC2 KeyPair
      Stage:
        default: Stage to deploy
      DeploymentPreference:
        default: CodeDeploy deployment preference
      DNSDomainName:
        default: Domain name in Route53
      DNSName:
        default: Base DNS name for APIs
      ValidationDomain:
        default: Domain name for ACM certificate validation
      EnableVPC:
        default: Creates a VPC
      AccessKeyID:
        default: AWS Access Key ID
      SecretAccessKey:
        default: AWS Secret Access Key
      EnableEC2Instance:
        default: Creates an EC2 instance for Data Pipeline
      EC2InstanceSize:
        default: Type of EC2 instance
      EnableEMRCluster:
        default: Create an EMR cluster for Data Pipeline
      EMRVersion:
        default: EMR release version
      EMRMasterInstanceType:
        default: Type of EMR master instances
      EMRMasterInstanceCount:
        default: Number of EMR master instances
      EMRCoreInstanceType:
        default: Type of EMR core instances
      EMRCoreInstanceCount:
        default: Number of EMR core instances
      EnableRedshift:
        default: Create a Redshift instance
      RedshiftNodeType:
        default: Type of Redshift instance nodes
      RedshiftNumberOfNodes:
        default: Number of Redshift nodes
      RedshiftDatabase:
        default: The default Redshift database
      RedshiftUsername:
        default: The Redshift username
      RedshiftPassword:
        default: The Redshift password

Parameters:
  CodePipeline:
    Type: String
    Description: The CodePipeline pipeline that build this app
  BuildRegion:
    Type: String
    Description: The region the app was built in
  SourceVersion:
    Type: String
    Description: The source version built
  Build:
    Type: String
    Description: The unique build ID
  CodeBucket:
    Type: String
    Description: The S3 bucket user code is stored in.
  CodePrefix:
    Type: String
    Description: The prefix into the S3 bucket code is stored in.
  KeyPair:
    Type: String
    Description: The EC2 KeyPair to use
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''
  DeploymentPreference:
    Type: String
    Description: The CodeDeploy deployment preference for safe Lambda deploys.
    Default: Canary10Percent5Minutes
    AllowedValues:
      - Canary10Percent5Minutes
      - Canary10Percent10Minutes
      - Canary10Percent15Minutes
      - Canary10Percent30Minutes
      - Linear10PercentEvery1Minutes
      - Linear10PercentEvery2Minutes
      - Linear10PercentEvery3Minutes
      - Linear10PercentEvery10Minutes
      - AllAtOnce
  DNSDomainName:
    Type: String
    Description: The domain name in Route53, such as example.com, this warehouse is served from.
    Default: ''
  DNSName:
    Type: String
    Description: The base DNS name, such as warehouse.example.com, this warehouse is served from.  Must be a the DNSDomainName or a subdomain of it.
    Default: ''
  ValidationDomain:
    Type: String
    Description: The DNS domain to validate ACM certificates against, such as example.com.  Should be a the DNSDomainName.
    Default: ''
  HostedZoneID:
    Type: String
    Description: The existing Hosted Zone to use.  Creates a Hosted Zone if not provided.
    Default: ''
  EnableVPC:
    Type: String
    Description: If non-empty, create a VPC.  EnableEC2Instance, EnableEMRCluster, and EnableRedshift imply this option.
    Default: ''
  AccessKeyID:
    Type: String
    Description: The AWS Access Key ID to use for the Data Pipeline Task Runner
    Default: ''
  SecretAccessKey:
    Type: String
    Description: The AWS Secret Access Key to use for the Data Pipeline Task Runner
    Default: ''
    NoEcho: true
  EnableEC2Instance:
    Type: String
    Description: If non-empty, create an EC2 instance for use by Data Pipeline.
    Default: ''
  EC2InstanceSize:
    Type: String
    Description: The instance size of the EC2 instance for use by Data Pipeline
    Default: t2.nano
  EnableEMRCluster:
    Type: String
    Description: If non-empty, create an EMR cluster.
    Default: ''
  EMRRelease:
    Type: String
    Description: The EMR release version to use.
    Default: emr-5.23.0
  EMRMasterInstanceType:
    Type: String
    Description: The instance type of the master instances in the EMR cluster.
    AllowedPattern: "[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*"
    Default: m1.medium
  EMRMasterInstanceCount:
    Type: Number
    Description: The number of master instances in the EMR cluster.
    MinValue: 1
    MaxValue: 256
    Default: 1
  EMRCoreInstanceType:
    Type: String
    Description: The instance type of the core instances in the EMR cluster.
    AllowedPattern: "[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*"
    Default: m1.medium
  EMRCoreInstanceCount:
    Type: Number
    Description: The number of core instances in the EMR cluster.
    MinValue: 1
    MaxValue: 256
    Default: 1
  EnableRedshift:
    Type: String
    Description: If non-empty, create a Redshift cluster.
    Default: ''
  RedshiftNodeType:
    Type: String
    Description: The type of instances in the Redshift cluster.
    AllowedValues:
      - dc2.large
      - dc2.8xlarge
      - ds2.xlarge
      - ds2.8xlarge
    Default: dc2.large
  RedshiftNumberOfNodes:
    Type: Number
    Description: The number of nodes in the Redshift cluster.
    MinValue: 1
    MaxValue: 100
    Default: 1
  RedshiftDatabase:
    Type: String
    Description: The name of the default Redshift database
    Default: dataless
  RedshiftUsername:
    Type: String
    Description: The username of the default Redshift user
    Default: dataless
  RedshiftPassword:
    Type: String
    Description: The password of the default Redshift user
    Default: dataless
    NoEcho: true

Conditions:
  DNSEnabled: !And
    - !Not [!Equals [!Ref DNSDomainName, ""]]
    - !Not [!Equals [!Ref DNSName, ""]]
    - !Not [!Equals [!Ref ValidationDomain, ""]]
  InternalHostedZone: !And
    - !Not [!Equals [!Ref DNSDomainName, ""]]
    - !Not [!Equals [!Ref DNSName, ""]]
    - !Not [!Equals [!Ref ValidationDomain, ""]]
    - !Equals [!Ref HostedZoneID, ""]
  EC2InstanceEnabled: !And
    - !Not [!Equals [!Ref EnableEC2Instance, ""]]
    - !Not [!Equals [!Ref AccessKeyID, ""]]
    - !Not [!Equals [!Ref SecretAccessKey, ""]]
  EMREnabled: !And
    - !Not [!Equals [!Ref EnableEMRCluster, ""]]
    - !Not [!Equals [!Ref AccessKeyID, ""]]
    - !Not [!Equals [!Ref SecretAccessKey, ""]]
  RedshiftEnabled: !And
    - !Not [!Equals [!Ref EnableRedshift, ""]]
    - !Not [!Equals [!Ref RedshiftDatabase, ""]]
    - !Not [!Equals [!Ref RedshiftUsername, ""]]
    - !Not [!Equals [!Ref RedshiftPassword, ""]]
  RedshiftSingleNode: !Equals [!Ref RedshiftNumberOfNodes, 1]
  VPCEnabled: !Or
    - !Not [!Equals [!Ref EnableVPC, ""]]
    - !Not [!Equals [!Ref EnableEC2Instance, ""]]
    - !Not [!Equals [!Ref EnableEMRCluster, ""]]
    - !Not [!Equals [!Ref EnableRedshift, ""]]

Outputs:
  BaseURL:
    Value: !If
      - DNSEnabled
      - !Ref DNSName
      - !GetAtt AdvertisingService.Outputs.BaseURL

Mappings:
  AMIs:
    us-east-1:
      PV64Instance: ami-0023040df18933030
    us-west-2:
      PV64Instance: ami-afe1c0d7
    eu-west-1:
      PV64Instance: ami-0c651f40f9861388f
    ap-southeast-2:
      PV64Instance: ami-0d783a243942fbe54
    ap-northeast-1:
      PV64Instance: ami-0f16a2ca7efacfa65

Resources:
  ##########
  # Bucket #
  ##########

  Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
      MetricsConfigurations:
        - Id: raw
          Prefix: data/raw/
        - Id: lake
          Prefix: data/lake/
        - Id: temp
          Prefix: data/temp/

  #######
  # VPC #
  #######

  VPC:
    Type: AWS::EC2::VPC
    Condition: VPCEnabled
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: VPCEnabled
    DependsOn:
      - VPC

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: VPCEnabled
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  Subnet:
    Type: AWS::EC2::Subnet
    Condition: VPCEnabled
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 172.31.0.0/16
      MapPublicIpOnLaunch: true

  RouteTable:
    Type: AWS::EC2::RouteTable
    Condition: VPCEnabled
    Properties:
      VpcId: !Ref VPC

  Route:
    Type: AWS::EC2::Route
    Condition: VPCEnabled
    DependsOn:
      - GatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: VPCEnabled
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: VPCEnabled
    Properties:
      GroupName: SecurityGroup
      GroupDescription: Default Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ############
  # Redshift #
  ############

  RedshiftClusterSecurityGroup:
    Type: AWS::Redshift::ClusterSecurityGroup
    Condition: RedshiftEnabled
    Properties:
      Description: Redshift Cluster Security Group

  RedshiftClusterSecurityGroupIngress:
    Type: AWS::Redshift::ClusterSecurityGroupIngress
    Condition: RedshiftEnabled
    Properties:
      ClusterSecurityGroupName: !Ref RedshiftClusterSecurityGroup
      CIDRIP: 0.0.0.0/0

  RedshiftClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Condition: RedshiftEnabled
    Properties:
      Description: Redshift Cluster Subnet Group
      SubnetIds:
        - !Ref Subnet

  RedshiftRole:
    Type: AWS::IAM::Role
    Condition: RedshiftEnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "redshift.${AWS::URLSuffix}"
      Policies:
        - PolicyName: Spectrum
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:Get*
                  - s3:List*
                Effect: Allow
                Resource:
                  - !Sub "${Bucket.Arn}/data/lake/*"
              - Action:
                  - glue:*
                  - athena:*
                Effect: Allow
                Resource: "*"

  Redshift:
    Type: AWS::Redshift::Cluster
    Condition: RedshiftEnabled
    Properties: !If
      - RedshiftSingleNode
      - ClusterType: single-node
        ClusterIdentifier: !Sub "${AWS::StackName}-${AWS::Region}-redshift-cluster"
        DBName: "warehouse"
        Encrypted: true
        MasterUsername: "warehouse"
        MasterUserPassword: "War340u5e!"
        NodeType: !Ref RedshiftNodeType
        ClusterSubnetGroupName: !Ref RedshiftClusterSubnetGroup
        VpcSecurityGroupIds:
          - !Ref SecurityGroup
          - !GetAtt VPC.DefaultSecurityGroup
        IamRoles:
          - !GetAtt RedshiftRole.Arn
          # - !GetAtt PipelineRole.Arn
          # - !GetAtt PipelineResourceRole.Arn
        PubliclyAccessible: true
        AvailabilityZone: !GetAtt Subnet.AvailabilityZone
      - ClusterType: multi-node
        ClusterIdentifier: !Sub "${AWS::StackName}-${AWS::Region}-redshift-cluster"
        DBName: "warehouse"
        Encrypted: true
        MasterUsername: "warehouse"
        MasterUserPassword: "War340u5e!"
        NodeType: !Ref RedshiftNodeType
        NumberOfNodes: !Ref RedshiftNumberOfNodes
        ClusterSubnetGroupName: !Ref RedshiftClusterSubnetGroup
        VpcSecurityGroupIds:
          - !Ref SecurityGroup
          - !GetAtt VPC.DefaultSecurityGroup
        IamRoles:
          - !GetAtt RedshiftRole.Arn
          # - !GetAtt PipelineRole.Arn
          # - !GetAtt PipelineResourceRole.Arn
        PubliclyAccessible: true
        AvailabilityZone: !GetAtt Subnet.AvailabilityZone

  ############
  # Instance #
  ############

  InstanceRole:
    Type: AWS::IAM::Role
    Condition: EC2InstanceEnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
                - !Sub "elasticmapreduce.${AWS::URLSuffix}"
                - !Sub "iam.${AWS::URLSuffix}"
                - !Sub "s3.${AWS::URLSuffix}"
                - !Sub "sqs.${AWS::URLSuffix}"
                - !Sub "logs.${AWS::Region}.${AWS::URLSuffix}"
                - !Sub "autoscaling.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforDataPipelineRole

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: EC2InstanceEnabled
    Properties:
      Roles:
        - !Ref InstanceRole

  Instance:
    Type: AWS::EC2::Instance
    Condition: EC2InstanceEnabled
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap
        - AMIs
        - !Ref AWS::Region
        - PV64Instance
      SecurityGroupIds:
        - !Ref SecurityGroup
        - !GetAtt VPC.DefaultSecurityGroup
      SubnetId: !Ref Subnet
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            set -x -e

            # Install task runner
            aws s3 cp "s3://datapipeline-us-east-1/us-east-1/software/latest/TaskRunner/TaskRunner-1.0.jar" "${!HOME}/TaskRunner-1.0.jar"
            echo '{"access-id": "${AccessKeyID}", "private-key": "${SecretAccessKey}"}' | jq -cr '.' > "${!HOME}/credentials.json"
            nohup java -jar "${!HOME}/TaskRunner-1.0.jar" --workerGroup="${AWS::StackName}-${AWS::Region}-instance-worker-group" --region="${AWS::Region}" --logUri="s3://${Bucket}/logs/task-runner/instance/" &

  #######
  # EMR #
  #######

  EMRJobFlowRole:
    Type: AWS::IAM::Role
    Condition: EMREnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
                - !Sub "elasticmapreduce.${AWS::URLSuffix}"
                - !Sub "iam.${AWS::URLSuffix}"
                - !Sub "s3.${AWS::URLSuffix}"
                - !Sub "sqs.${AWS::URLSuffix}"
                - !Sub "logs.${AWS::Region}.${AWS::URLSuffix}"
                - !Sub "autoscaling.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforDataPipelineRole
      Policies:
        - PolicyName: JobFlow
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - cloudwatch:*
                  - dynamodb:*
                  - ec2:Describe*
                  - elasticmapreduce:Describe*
                  - elasticmapreduce:ListBootstrapActions
                  - elasticmapreduce:ListClusters
                  - elasticmapreduce:ListInstanceGroups
                  - elasticmapreduce:ListInstances
                  - elasticmapreduce:ListSteps
                  - kinesis:CreateStream
                  - kinesis:DeleteStream
                  - kinesis:DescribeStream
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:MergeShards
                  - kinesis:PutRecord
                  - kinesis:SplitShard
                  - rds:Describe*
                  - s3:*
                  - sdb:*
                  - sns:*
                  - sqs:*
                  - glue:CreateDatabase
                  - glue:UpdateDatabase
                  - glue:DeleteDatabase
                  - glue:GetDatabase
                  - glue:GetDatabases
                  - glue:CreateTable
                  - glue:UpdateTable
                  - glue:DeleteTable
                  - glue:GetTable
                  - glue:GetTables
                  - glue:GetTableVersions
                  - glue:CreatePartition
                  - glue:BatchCreatePartition
                  - glue:UpdatePartition
                  - glue:DeletePartition
                  - glue:BatchDeletePartition
                  - glue:GetPartition
                  - glue:GetPartitions
                  - glue:BatchGetPartition
                  - glue:CreateUserDefinedFunction
                  - glue:UpdateUserDefinedFunction
                  - glue:DeleteUserDefinedFunction
                  - glue:GetUserDefinedFunction
                  - glue:GetUserDefinedFunctions
                Effect: Allow
                Resource: "*"
              - Action:
                  - cloudwatch:*
                  - datapipeline:*
                  - dynamodb:*
                  - ec2:Describe*
                  - elasticmapreduce:AddJobFlowSteps
                  - elasticmapreduce:Describe*
                  - elasticmapreduce:ListInstance*
                  - rds:Describe*
                  - redshift:DescribeClusters
                  - redshift:DescribeClusterSecurityGroups
                  - s3:*
                  - sdb:*
                  - sns:*
                  - sqs:*
                Effect: Allow
                Resource: "*"

  EMRProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: EMREnabled
    Properties:
      Roles:
        - !Ref EMRJobFlowRole

  EMRServiceRole:
    Type: AWS::IAM::Role
    Condition: EMREnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
                - !Sub "elasticmapreduce.${AWS::URLSuffix}"
                - !Sub "iam.${AWS::URLSuffix}"
                - !Sub "s3.${AWS::URLSuffix}"
                - !Sub "sqs.${AWS::URLSuffix}"
                - !Sub "logs.${AWS::Region}.${AWS::URLSuffix}"
                - !Sub "autoscaling.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole
      Policies:
        - PolicyName: Service
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CancelSpotInstanceRequests
                  - ec2:CreateNetworkInterface
                  - ec2:CreateSecurityGroup
                  - ec2:CreateTags
                  - ec2:DeleteNetworkInterface
                  - ec2:DeleteSecurityGroup
                  - ec2:DeleteTags
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeAccountAttributes
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeImages
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeInstances
                  - ec2:DescribeKeyPairs
                  - ec2:DescribeNetworkAcls
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribePrefixLists
                  - ec2:DescribeRouteTables
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSpotInstanceRequests
                  - ec2:DescribeSpotPriceHistory
                  - ec2:DescribeSubnets
                  - ec2:DescribeTags
                  - ec2:DescribeVpcAttribute
                  - ec2:DescribeVpcEndpoints
                  - ec2:DescribeVpcEndpointServices
                  - ec2:DescribeVpcs
                  - ec2:DetachNetworkInterface
                  - ec2:ModifyImageAttribute
                  - ec2:ModifyInstanceAttribute
                  - ec2:RequestSpotInstances
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RunInstances
                  - ec2:TerminateInstances
                  - ec2:DeleteVolume
                  - ec2:DescribeVolumeStatus
                  - ec2:DescribeVolumes
                  - ec2:DetachVolume
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:ListInstanceProfiles
                  - iam:ListRolePolicies
                  - iam:PassRole
                  - s3:CreateBucket
                  - s3:Get*
                  - s3:List*
                  - sdb:BatchPutAttributes
                  - sdb:Select
                  - sqs:CreateQueue
                  - sqs:Delete*
                  - sqs:GetQueue*
                  - sqs:PurgeQueue
                  - sqs:ReceiveMessage
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:DeleteAlarms
                  - application-autoscaling:RegisterScalableTarget
                  - application-autoscaling:DeregisterScalableTarget
                  - application-autoscaling:PutScalingPolicy
                  - application-autoscaling:DeleteScalingPolicy
                  - application-autoscaling:Describe*
                Effect: Allow
                Resource: "*"

  EMR:
    Type: AWS::EMR::Cluster
    Condition: EMREnabled
    Properties:
      Applications:
        - Name: hive
        - Name: pig
        - Name: spark
      # BootstrapActions:
        # TODO: Broken :(
        # - Name: Install Task Runner
        #   ScriptBootstrapAction:
        #     Path: s3://elasticmapreduce/bootstrap-actions/run-if
        #     Args:
        #       - instance.isMaster=true
        #       - !Sub "s3://${CodeBucket}/${CodePrefix}/scripts/emr/install_task_runner.sh"
        #       - !Ref AccessKeyID
        #       - !Ref SecretAccessKey
        #       - !Sub "${AWS::StackName}-${AWS::Region}-emr-worker-group"
        #       - !Ref AWS::Region
        #       - !Sub "s3://${Bucket}/logs/task-runner/emr/"
      Configurations:
        - Classification: hive-site
          ConfigurationProperties:
            hive.metastore.client.factory.class: com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory
            hive.metastore.glue.catalogid: !Ref AWS::AccountId
        - Classification: spark-hive-site
          ConfigurationProperties:
            hive.metastore.client.factory.class: com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory
            hive.metastore.glue.catalogid: !Ref AWS::AccountId
      Instances:
        AdditionalMasterSecurityGroups:
          - !Ref SecurityGroup
          - !GetAtt VPC.DefaultSecurityGroup
        AdditionalSlaveSecurityGroups:
          - !Ref SecurityGroup
          - !GetAtt VPC.DefaultSecurityGroup
        Ec2KeyName: !Ref KeyPair
        Ec2SubnetId: !Ref Subnet
        MasterInstanceGroup:
          InstanceCount: !Ref EMRMasterInstanceCount
          InstanceType: !Ref EMRMasterInstanceType
        CoreInstanceGroup:
          InstanceCount: !Ref EMRCoreInstanceCount
          InstanceType: !Ref EMRCoreInstanceType
        TerminationProtected: false
      JobFlowRole: !Ref EMRProfile
      Name: !Sub "${AWS::StackName}-${AWS::Region}-warehouse-emr-cluster"
      ReleaseLabel: !Ref EMRRelease
      ServiceRole: !Ref EMRServiceRole
      LogUri: !Sub "s3://${Bucket}/logs/emr"

  ##################
  # Events Service #
  ##################

  AdvertisingService:
    Type: AWS::Serverless::Application
    Properties:
      Location: svc/advertising/service.yaml
      Parameters:
        CodePipeline: !Ref CodePipeline
        BuildRegion: !Ref BuildRegion
        SourceVersion: !Ref SourceVersion
        Build: !Ref Build
        CodeBucket: !Ref CodeBucket
        CodePrefix: !Sub "${CodePrefix}/svc/advertising"
        KeyPair: !Ref KeyPair
        Stage: !Ref Stage
        DeploymentPreference: !Ref DeploymentPreference
        BucketName: !Ref Bucket
        BucketARN: !GetAtt Bucket.Arn
        Subnet: !If
          - VPCEnabled
          - !Ref Subnet
          - !Ref AWS::NoValue
        SecurityGroup: !If
          - VPCEnabled
          - !Ref SecurityGroup
          - !Ref AWS::NoValue
        AccessKeyID: !Ref AccessKeyID
        SecretAccessKey: !Ref SecretAccessKey
        EnableEC2Instance: !Ref EnableEC2Instance
        EnableEMRCluster: !Ref EnableEMRCluster
        RedshiftClusterId: !If
          - RedshiftEnabled
          - !Ref Redshift
          - !Ref AWS::NoValue
        RedshiftDatabase: !Ref RedshiftDatabase
        RedshiftUsername: !Ref RedshiftUsername
        RedshiftPassword: !Ref RedshiftPassword

  ##########
  # Router #
  ##########

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Condition: DNSEnabled
    Properties:
      DomainName: !Ref DNSName
      DomainValidationOptions:
        - DomainName: !Ref DNSName
          ValidationDomain: !Ref ValidationDomain

  DomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: DNSEnabled
    Properties:
      CertificateArn: !Ref Certificate
      DomainName: !Ref DNSName

  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: DNSEnabled
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !GetAtt AdvertisingService.Outputs.API
      Stage: !GetAtt AdvertisingService.Outputs.Stage

  #######
  # DNS #
  #######

  HostedZone:
    Type: AWS::Route53::HostedZone
    Condition: InternalHostedZone
    Properties:
      Name: !Ref DNSDomainName

  RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Condition: DNSEnabled
    Properties:
      HostedZoneId: !If [InternalHostedZone, !Ref HostedZone, !Ref HostedZoneID]
      RecordSets:
        - Type: A
          Name: !Ref DNSName
          AliasTarget:
            DNSName: !GetAtt DomainName.DistributionDomainName
            HostedZoneId: Z2FDTNDATAQYW2

  #################
  # Ops Dashboard #
  #################

  OpsDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardBody: !Sub |
        {
          "start": "-PT1H",
          "periodOverride": "inherit",
          "widgets": [
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Beacon Endpoints" }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/ApiGateway,ApiName,Resource,Method,Stage} MetricName=\"Count\" Stage=\"${Stage}\"', 'Sum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Request Rate",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/ApiGateway,ApiName,Resource,Method,Stage} MetricName=\"Latency\" Stage=\"${Stage}\"', 'p95', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Latency",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/ApiGateway,ApiName,Resource,Method,Stage} MetricName=\"IntegrationLatency\" Stage=\"${Stage}\"', 'p95', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Integration Latency",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/ApiGateway,ApiName,Resource,Method,Stage} MetricName=XXError Stage=\"${Stage}\"', 'Sum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Errors",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Firehoses" }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/Firehose,DeliveryStreamName} MetricName=\"IncomingRecords\"', 'Sum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Incoming Records",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/Firehose,DeliveryStreamName} MetricName=\"IncomingBytes\"', 'Sum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Incoming Bytes",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/Firehose,DeliveryStreamName} MetricName=\"DeliveryToS3.Success\"', 'Sum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Successful Delivery To S3",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/Firehose,DeliveryStreamName} MetricName=\"DeliveryToS3.Records\"', 'Sum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Records Delivered To S3",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/Firehose,DeliveryStreamName} MetricName=\"DeliveryToS3.Bytes\"', 'Sum', 60)" } ]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Bytes Delivered To S3",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/Firehose,DeliveryStreamName} MetricName=\"DeliveryToS3.DataFreshness\"', 'Maximum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Delivery To S3 Data Freshness",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Real-Time App" }
            },
            {
              "type": "metric",
              "width": 24,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/KinesisAnalytics,Application} MetricName=\"Success\"', 'Average', 60)" } ]
                ],
                "title": "Success",
                "region": "${AWS::Region}",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/KinesisAnalytics,Application} MetricName=\"KPUs\"', 'Average', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "KPUs",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/KinesisAnalytics,Application,Flow,Id} MetricName=\"MillisBehindLatest\" Flow=\"Input\"', 'Maximum', 60)" } ]
                ],
                "period": 60,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Input Lag (ms)",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/KinesisAnalytics,Application,Flow,Id} MetricName=\"Records\" Flow=\"Input\"', 'Maximum', 60)" } ]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Input Records Processed",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/KinesisAnalytics,Application,Flow,Id} MetricName=\"Bytes\" Flow=\"Input\"', 'Maximum', 60)" } ]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Input Bytes Processed",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/KinesisAnalytics,Application,Flow,Id} MetricName=\"Bytes\" Flow=\"Output\"', 'Average', 60)" } ]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Output Processing Success",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/KinesisAnalytics,Application,Flow,Id} MetricName=\"Records\" Flow=\"Output\"', 'Average', 60)" } ]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Output Processing Records",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/KinesisAnalytics,Application,Flow,Id} MetricName=\"Bytes\" Flow=\"Output\"', 'Average', 60)" } ]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Input Processing Bytes",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/KinesisAnalytics,Application,Flow,Id} MetricName=\"LambdaDelivery.OkRecords\" Flow=\"Output\"', 'Average', 60)" } ]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Delivery Success",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/KinesisAnalytics,Application,Flow,Id} MetricName=\"LambdaDelivery.FailedRecords\" Flow=\"Output\"', 'Average', 60)" } ]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Delivery Failures",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/KinesisAnalytics,Application,Flow,Id} MetricName=\"LambdaDelivery.Duration\" Flow=\"Output\"', 'Average', 60)" } ]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Lambda Delivery Duration",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Lambas" }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/Lambda,FunctionName} MetricName=\"Invocations\"', 'Sum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Invocations",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/Lambda,FunctionName} MetricName=\"Duration\"', 'p95', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Duration",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/Lambda,FunctionName} MetricName=\"Errors\"', 'Sum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Errors",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/Lambda,FunctionName} MetricName=\"DeadLetterErrors\"', 'Sum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Dead Letter Errors",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/Lambda,FunctionName} MetricName=\"ConcurrentExecutions\"', 'Maximum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Concurrent Executions",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/Lambda,FunctionName} MetricName=\"UnreservedConcurrentExecutions\"', 'Sum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Unreserved Concurrent Executions",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/Lambda,FunctionName} MetricName=\"Throttles\"', 'Sum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Throttles",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/Lambda,FunctionName} MetricName=\"IteratorAge\"', 'Maximum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Iterator Age",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Data Lake" }
            },
            {
              "type": "metric",
              "width": 12,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/S3,StorageType} MetricName=\"BucketSizeBytes\"', 'Maximum', 86400)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Bucket Size (bytes)",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 12,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/S3,StorageType} MetricName=\"NumerOfObjects\"', 'Maximum', 86400)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Bucket Size (objects)",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/S3,BucketName,FilterId} MetricName=\"AllRequests\"', 'Sum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "All Requests",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/S3,BucketName,FilterId} MetricName=\"GetRequests\"', 'Sum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Get Requests",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/S3,BucketName,FilterId} MetricName=\"PutRequests\"', 'Sum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Put Requests",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/S3,BucketName,FilterId} MetricName=\"SelectRequests\"', 'Sum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Select Requests",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/S3,BucketName,FilterId} MetricName=\"BytesUploaded\"', 'Sum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Bytes Uploaded",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/S3,BucketName,FilterId} MetricName=\"BytesDownloaded\"', 'Sum', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Bytes Downloaded",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/S3,BucketName,FilterId} MetricName=\"FirstByteLatency\"', 'p95', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "First Byte Latency",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/S3,BucketName,FilterId} MetricName=\"TotalRequestLatency\"', 'p95', 60)" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Total Request Latency",
                "liveData": false,
                "view": "timeSeries",
                "stacked": false,
                "legend": {
                    "position": "hidden"
                }
              }
            },
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Athena" }
            },
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Glue ETL Jobs" }
            }
          ]
        }
