version: 0.2

phases:

  install:
    commands:

      # AWS Codebuild Go images use /go for the $GOPATH so let's symlink our
      # application source code into that directory structure.
      - ln -s "${CODEBUILD_SRC_DIR}" "/go/src/handler"

      # Install golint
      - go get golang.org/x/lint/golint

      # Install Testify to use common assertions and mocks in tests
      - go get -u github.com/stretchr/testify

  pre_build:
    commands:

      # Make sure we're in the project directory within our GOPATH
      - cd "/go/src/handler"

      # Fetch all dependencies
      - go get ./...

      # Ensure code passes all lint tests
      - golint -set_exit_status

      # Check for common Go application problems with 'go tool vet'
      - go tool vet .

      # Run all tests included with our application
      - go test .

  build:
    commands:
      # Build the tool to configure the application
      - go build -o ${GOPATH}/bin/generate-config ./util/generate-config

      # Build the go application
      # - go build -o main

      # Copy static assets to S3, and package application with AWS CloudFormation/SAM
      - aws s3 cp --recursive public/ s3://$WEBSITE_S3_BUCKET/public/ --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
      - sed -i -e "s|assets/|$WEBSITE_S3_PREFIX/public/assets/|g" public/index.html
      - aws cloudformation package --template template.yml --s3-bucket $S3_BUCKET --output-template template-export.yml

  post_build:
    commands:
      - |
        ${GOPATH}/bin/generate-config -o template-configuration.json \
          -partition         "${PARTITION}" \
          -region            "${AWS_REGION}" \
          -account-id        "${ACCOUNT_ID}" \
          -project-id        "${PROJECT_ID}" \
          -stage             "${STAGE_NAME}" \
          -dns-domain-name   "${DNS_DOMAIN_NAME}" \
          -dns-name          "${DNS_NAME}" \
          -validation-domain "${VALIDATION_DOMAIN}" \
          -hosted-zone-id    "${HOSTED_ZONE_ID}" \
          $(if [ "${ENABLE_EC2_INSTANCE}" != "" ]; then echo "-ec2"; fi) \
          -ec2-type          "${EC2_INSTANCE_TYPE}" \
          $(if [ "${ENABLE_EMR_CLUSTER}" != "" ]; then echo "-emr"; fi) \
          -emr-master-type   "${EMR_MASTER_INSTANCE_TYPE}" \
          -emr-master-count  ${EMR_MASTER_INSTANCE_COUNT:-1} \
          -emr-core-type     "${EMR_CORE_INSTANCE_TYPE}" \
          -emr-core-count    ${EMR_CORE_INSTANCE_COUNT:-1} \
          $(if [ "${ENABLE_REDSHIFT}" != "" ]; then echo "-redshift"; fi) \
          -redshift-type     "${REDSHIFT_NODE_TYPE}" \
          -redshift-count    ${REDSHIFT_NUMBER_OF_NODES:-1}
      # Do not remove this statement. This command is required for AWS CodeStar projects.
      # Update the AWS Partition, AWS Region, account ID and project ID in the project ARN on template-configuration.json file so AWS CloudFormation can tag project resources.
      # - |
      #   sed -i.bak \
      #     -e 's/\$PARTITION\$/'${PARTITION}'/g' \
      #     -e 's/\$AWS_REGION\$/'${AWS_REGION}'/g' \
      #     -e 's/\$ACCOUNT_ID\$/'${ACCOUNT_ID}'/g' \
      #     -e 's/\$PROJECT_ID\$/'${PROJECT_ID}'/g' \
      #     template-configuration.json

artifacts:
  type: zip
  files:
    - template-export.yml
    - template-configuration.json
