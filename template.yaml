AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: Code Location
        Parameters:
          - CodeBucket
          - CodePrefix
      - Label: Deployment Configuration
        Parameters:
          - Stage
      - Label: DNS
        Parameters:
          - DNSDomainName
          - DNSName
          - ValidationDomain
          - HostedZoneID
      - Label: VPC
        Parameters:
          - EnableVPC
      - Label: EC2 Instance
        Parameters:
          - EnableEC2Instance
          - EC2InstanceSize
      - Label: EMR Cluster
        Parameters:
          - EnableEMRCluster
          - EMRRelease
          - EMRMasterInstanceType
          - EMRMasterInstanceCount
          - EMRCoreInstanceType
          - EMRCoreInstanceCount
      - Label: Redshift
        Parameters:
          - EnableRedshift
          - RedshiftNodeType
          - RedshiftNumberOfNodes
      - Label: API Gateway
        Parameters:
          - APIName
    ParameterLabels:
      CodeBucket:
        default: Bucket containing scripts
      CodePrefix:
        default: Prefix for scripts
      Stage:
        default: Stage to deploy
      DNSDomainName:
        default: Domain name in Route53
      DNSName:
        default: Base DNS name for APIs
      ValidationDomain:
        default: Domain name for ACM certificate validation
      EnableVPC:
        default: Creates a VPC
      EnableEC2Instance:
        default: Creates an EC2 instance for Data Pipeline
      EC2InstanceSize:
        default: Type of EC2 instance
      EnableEMRCluster:
        default: Create an EMR cluster for Data Pipeline
      EMRVersion:
        default: EMR release version
      EMRMasterInstanceType:
        default: Type of EMR master instances
      EMRMasterInstanceCount:
        default: Number of EMR master instances
      EMRCoreInstanceType:
        default: Type of EMR core instances
      EMRCoreInstanceCount:
        default: Number of EMR core instances
      EnableRedshift:
        default: Create a Redshift instance
      RedshiftNodeType:
        default: Type of Redshift instance nodes
      RedshiftNumberOfNodes:
        default: Number of Redshift nodes
      APIName:
        default: Displayed name of API gateway

Parameters:
  CodeBucket:
    Type: String
    Description: The S3 bucket user code is stored in.
  CodePrefix:
    Type: String
    Description: The prefix into the S3 bucket code is stored in.
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''
  DNSDomainName:
    Type: String
    Description: The domain name in Route53, such as example.com, this warehouse is served from.
    Default: ''
  DNSName:
    Type: String
    Description: The base DNS name, such as warehouse.example.com, this warehouse is served from.  Must be a the DNSDomainName or a subdomain of it.
    Default: ''
  ValidationDomain:
    Type: String
    Description: The DNS domain to validate ACM certificates against, such as example.com.  Should be a the DNSDomainName.
    Default: ''
  HostedZoneID:
    Type: String
    Description: The existing Hosted Zone to use.  Creates a Hosted Zone if not provided.
    Default: ''
  EnableVPC:
    Type: String
    Description: If non-empty, create a VPC.  EnableEC2Instance, EnableEMRCluster, and EnableRedshift imply this option.
    Default: ''
  EnableEC2Instance:
    Type: String
    Description: If non-empty, create an EC2 instance for use by Data Pipeline.
    Default: ''
  EC2InstanceSize:
    Type: String
    Description: The instance size of the EC2 instance for use by Data Pipeline
    Default: t2.nano
  EnableEMRCluster:
    Type: String
    Description: If non-empty, create an EMR cluster.
    Default: ''
  EMRRelease:
    Type: String
    Description: The EMR release version to use.
    Default: emr-5.23.0
  EMRMasterInstanceType:
    Type: String
    Description: The instance type of the master instances in the EMR cluster.
    AllowedPattern: "[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*"
    Default: m1.medium
  EMRMasterInstanceCount:
    Type: Number
    Description: The number of master instances in the EMR cluster.
    MinValue: 1
    MaxValue: 256
    Default: 1
  EMRCoreInstanceType:
    Type: String
    Description: The instance type of the core instances in the EMR cluster.
    AllowedPattern: "[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*"
    Default: m1.medium
  EMRCoreInstanceCount:
    Type: Number
    Description: The number of core instances in the EMR cluster.
    MinValue: 1
    MaxValue: 256
    Default: 1
  EnableRedshift:
    Type: String
    Description: If non-empty, create a Redshift cluster.
    Default: ''
  RedshiftNodeType:
    Type: String
    Description: The type of instances in the Redshift cluster.
    AllowedValues:
      - dc2.large
      - dc2.8xlarge
      - ds2.xlarge
      - ds2.8xlarge
    Default: dc2.large
  RedshiftNumberOfNodes:
    Type: Number
    Description: The number of nodes in the Redshift cluster.
    MinValue: 1
    MaxValue: 100
    Default: 1
  APIName:
    Type: String
    Description: The name of the API Gateway api.
    Default: Warehouse Service

Conditions:
  DNSEnabled: !And
    - !Not [!Equals [!Ref DNSDomainName, ""]]
    - !Not [!Equals [!Ref DNSName, ""]]
    - !Not [!Equals [!Ref ValidationDomain, ""]]
  InternalHostedZone: !And
    - !Not [!Equals [!Ref DNSDomainName, ""]]
    - !Not [!Equals [!Ref DNSName, ""]]
    - !Not [!Equals [!Ref ValidationDomain, ""]]
    - !Not [!Equals [!Ref HostedZoneID, ""]]
  EC2InstanceEnabled: !Not [!Equals [!Ref EnableEC2Instance, ""]]
  EMREnabled: !Not [!Equals [!Ref EnableEMRCluster, ""]]
  RedshiftEnabled: !Not [!Equals [!Ref EnableRedshift, ""]]
  RedshiftSingleNode: !Equals [!Ref RedshiftNumberOfNodes, 1]
  VPCEnabled: !Or
    - !Not [!Equals [!Ref EnableVPC, ""]]
    - !Not [!Equals [!Ref EnableEC2Instance, ""]]
    - !Not [!Equals [!Ref EnableEMRCluster, ""]]
    - !Not [!Equals [!Ref EnableRedshift, ""]]

Outputs:
  BaseURL:
    Value: !If
      - DNSEnabled
      - !Ref DNSName
      - !Sub "https://${API}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}"

Mappings:
  AMIs:
    us-east-1:
      PV64Instance: ami-0023040df18933030
    us-west-2:
      PV64Instance: ami-afe1c0d7
    eu-west-1:
      PV64Instance: ami-0c651f40f9861388f
    ap-southeast-2:
      PV64Instance: ami-0d783a243942fbe54
    ap-northeast-1:
      PV64Instance: ami-0f16a2ca7efacfa65

Globals:
  Function:
    Runtime: go1.x
    CodeUri:
      Bucket: !Ref CodeBucket
      Key: !Sub "${CodePrefix}/lambda/lambdas.zip"
    Tracing: Active
    AutoPublishAlias: Live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
  Api:
    TracingEnabled: true
    EndpointConfiguration: EDGE
  SimpleTable:
    SSESpecification:
      SSEEnabled: true

Resources:
  ##########
  # Bucket #
  ##########

  Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
      MetricsConfigurations:
        - Id: raw-events
          Prefix: data/raw/events/
        - Id: events
          Prefix: data/lake/events/

  #######
  # VPC #
  #######

  VPC:
    Type: AWS::EC2::VPC
    Condition: VPCEnabled
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: VPCEnabled
    DependsOn:
      - VPC

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: VPCEnabled
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  Subnet:
    Type: AWS::EC2::Subnet
    Condition: VPCEnabled
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 172.31.0.0/16
      MapPublicIpOnLaunch: true

  RouteTable:
    Type: AWS::EC2::RouteTable
    Condition: VPCEnabled
    Properties:
      VpcId: !Ref VPC

  Route:
    Type: AWS::EC2::Route
    Condition: VPCEnabled
    DependsOn:
      - GatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: VPCEnabled
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: VPCEnabled
    Properties:
      GroupName: SecurityGroup
      GroupDescription: Default Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ############
  # Redshift #
  ############

  RedshiftClusterSecurityGroup:
    Type: AWS::Redshift::ClusterSecurityGroup
    Condition: RedshiftEnabled
    Properties:
      Description: Redshift Cluster Security Group

  RedshiftClusterSecurityGroupIngress:
    Type: AWS::Redshift::ClusterSecurityGroupIngress
    Condition: RedshiftEnabled
    Properties:
      ClusterSecurityGroupName: !Ref RedshiftClusterSecurityGroup
      CIDRIP: 0.0.0.0/0

  RedshiftClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Condition: RedshiftEnabled
    Properties:
      Description: Redshift Cluster Subnet Group
      SubnetIds:
        - !Ref Subnet

  Redshift:
    Type: AWS::Redshift::Cluster
    Condition: RedshiftEnabled
    Properties:
      ClusterType: !If [RedshiftSingleNode, single-node, multi-node]
      ClusterIdentifier: !Sub "${AWS::StackName}-${AWS::Region}-redshift-cluster"
      DBName: "warehouse"
      Encrypted: true
      MasterUsername: "warehouse"
      MasterUserPassword: "War340u5e!"
      NodeType: !Ref RedshiftNodeType
      NumberOfNodes: !Ref RedshiftNumberOfNodes
      ClusterSubnetGroupName: !Ref RedshiftClusterSubnetGroup
      VpcSecurityGroupIds:
        - !Ref SecurityGroup
        - !GetAtt VPC.DefaultSecurityGroup
      PubliclyAccessible: true
      AvailabilityZone: !GetAtt Subnet.AvailabilityZone

  ############
  # Instance #
  ############

  InstanceRole:
    Type: AWS::IAM::Role
    Condition: EC2InstanceEnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
                - !Sub "elasticmapreduce.${AWS::URLSuffix}"
                - !Sub "iam.${AWS::URLSuffix}"
                - !Sub "s3.${AWS::URLSuffix}"
                - !Sub "sqs.${AWS::URLSuffix}"
                - !Sub "logs.${AWS::Region}.${AWS::URLSuffix}"
                - !Sub "autoscaling.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforDataPipelineRole

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: EC2InstanceEnabled
    Properties:
      Roles:
        - !Ref InstanceRole

  Instance:
    Type: AWS::EC2::Instance
    Condition: EC2InstanceEnabled
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap
        - AMIs
        - !Ref AWS::Region
        - PV64Instance
      SecurityGroupIds:
        - !Ref SecurityGroup
        - !GetAtt VPC.DefaultSecurityGroup
      SubnetId: !Ref Subnet
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            set -x -e

            # Install task runner
            aws s3 cp "s3://datapipeline-us-east-1/us-east-1/software/latest/TaskRunner/TaskRunner-1.0.jar" "${!HOME}/TaskRunner-1.0.jar"
            nohup java -jar "${!HOME}/TaskRunner-1.0.jar" --workerGroup="${AWS::StackName}-${AWS::Region}-instance-worker-group" --region="${AWS::Region}" --logUri="s3://${Bucket}/logs/task-runner/instance/" &

  #######
  # EMR #
  #######

  EMRJobFlowRole:
    Type: AWS::IAM::Role
    Condition: EMREnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
                - !Sub "elasticmapreduce.${AWS::URLSuffix}"
                - !Sub "iam.${AWS::URLSuffix}"
                - !Sub "s3.${AWS::URLSuffix}"
                - !Sub "sqs.${AWS::URLSuffix}"
                - !Sub "logs.${AWS::Region}.${AWS::URLSuffix}"
                - !Sub "autoscaling.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforDataPipelineRole
      Policies:
        - PolicyName: JobFlow
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - cloudwatch:*
                  - dynamodb:*
                  - ec2:Describe*
                  - elasticmapreduce:Describe*
                  - elasticmapreduce:ListBootstrapActions
                  - elasticmapreduce:ListClusters
                  - elasticmapreduce:ListInstanceGroups
                  - elasticmapreduce:ListInstances
                  - elasticmapreduce:ListSteps
                  - kinesis:CreateStream
                  - kinesis:DeleteStream
                  - kinesis:DescribeStream
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:MergeShards
                  - kinesis:PutRecord
                  - kinesis:SplitShard
                  - rds:Describe*
                  - s3:*
                  - sdb:*
                  - sns:*
                  - sqs:*
                  - glue:CreateDatabase
                  - glue:UpdateDatabase
                  - glue:DeleteDatabase
                  - glue:GetDatabase
                  - glue:GetDatabases
                  - glue:CreateTable
                  - glue:UpdateTable
                  - glue:DeleteTable
                  - glue:GetTable
                  - glue:GetTables
                  - glue:GetTableVersions
                  - glue:CreatePartition
                  - glue:BatchCreatePartition
                  - glue:UpdatePartition
                  - glue:DeletePartition
                  - glue:BatchDeletePartition
                  - glue:GetPartition
                  - glue:GetPartitions
                  - glue:BatchGetPartition
                  - glue:CreateUserDefinedFunction
                  - glue:UpdateUserDefinedFunction
                  - glue:DeleteUserDefinedFunction
                  - glue:GetUserDefinedFunction
                  - glue:GetUserDefinedFunctions
                Effect: Allow
                Resource: "*"
              - Action:
                  - cloudwatch:*
                  - datapipeline:*
                  - dynamodb:*
                  - ec2:Describe*
                  - elasticmapreduce:AddJobFlowSteps
                  - elasticmapreduce:Describe*
                  - elasticmapreduce:ListInstance*
                  - rds:Describe*
                  - redshift:DescribeClusters
                  - redshift:DescribeClusterSecurityGroups
                  - s3:*
                  - sdb:*
                  - sns:*
                  - sqs:*
                Effect: Allow
                Resource: "*"

  EMRProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: EMREnabled
    Properties:
      Roles:
        - !Ref EMRJobFlowRole

  EMRServiceRole:
    Type: AWS::IAM::Role
    Condition: EMREnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
                - !Sub "elasticmapreduce.${AWS::URLSuffix}"
                - !Sub "iam.${AWS::URLSuffix}"
                - !Sub "s3.${AWS::URLSuffix}"
                - !Sub "sqs.${AWS::URLSuffix}"
                - !Sub "logs.${AWS::Region}.${AWS::URLSuffix}"
                - !Sub "autoscaling.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole
      Policies:
        - PolicyName: Service
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CancelSpotInstanceRequests
                  - ec2:CreateNetworkInterface
                  - ec2:CreateSecurityGroup
                  - ec2:CreateTags
                  - ec2:DeleteNetworkInterface
                  - ec2:DeleteSecurityGroup
                  - ec2:DeleteTags
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeAccountAttributes
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeImages
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeInstances
                  - ec2:DescribeKeyPairs
                  - ec2:DescribeNetworkAcls
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribePrefixLists
                  - ec2:DescribeRouteTables
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSpotInstanceRequests
                  - ec2:DescribeSpotPriceHistory
                  - ec2:DescribeSubnets
                  - ec2:DescribeTags
                  - ec2:DescribeVpcAttribute
                  - ec2:DescribeVpcEndpoints
                  - ec2:DescribeVpcEndpointServices
                  - ec2:DescribeVpcs
                  - ec2:DetachNetworkInterface
                  - ec2:ModifyImageAttribute
                  - ec2:ModifyInstanceAttribute
                  - ec2:RequestSpotInstances
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RunInstances
                  - ec2:TerminateInstances
                  - ec2:DeleteVolume
                  - ec2:DescribeVolumeStatus
                  - ec2:DescribeVolumes
                  - ec2:DetachVolume
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:ListInstanceProfiles
                  - iam:ListRolePolicies
                  - iam:PassRole
                  - s3:CreateBucket
                  - s3:Get*
                  - s3:List*
                  - sdb:BatchPutAttributes
                  - sdb:Select
                  - sqs:CreateQueue
                  - sqs:Delete*
                  - sqs:GetQueue*
                  - sqs:PurgeQueue
                  - sqs:ReceiveMessage
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:DeleteAlarms
                  - application-autoscaling:RegisterScalableTarget
                  - application-autoscaling:DeregisterScalableTarget
                  - application-autoscaling:PutScalingPolicy
                  - application-autoscaling:DeleteScalingPolicy
                  - application-autoscaling:Describe*
                Effect: Allow
                Resource: "*"

  EMR:
    Type: AWS::EMR::Cluster
    Condition: EMREnabled
    Properties:
      Applications:
        - Name: hive
        - Name: pig
        - Name: spark
      BootstrapActions:
        - Name: Install Task Runner
          ScriptBootstrapAction:
            Path: s3://elasticmapreduce/bootstrap-actions/run-if
            Args:
              - instance.isMaster=true
              - !Sub "s3://${CodeBucket}/${CodePrefix}/scripts/emr/install_task_runner.sh"
              - !Sub "${AWS::StackName}-${AWS::Region}-emr-worker-group"
              - !Ref AWS::Region
              - !Sub "s3://${Bucket}/logs/task-runner/emr/"
      Configurations:
        - Classification: hive-site
          ConfigurationProperties:
            hive.metastore.client.factory.class: com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory
            hive.metastore.glue.catalogid: !Ref AWS::AccountId
        - Classification: spark-hive-site
          ConfigurationProperties:
            hive.metastore.client.factory.class: com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory
            hive.metastore.glue.catalogid: !Ref AWS::AccountId
      Instances:
        AdditionalMasterSecurityGroups:
          - !Ref SecurityGroup
          - !GetAtt VPC.DefaultSecurityGroup
        AdditionalSlaveSecurityGroups:
          - !Ref SecurityGroup
          - !GetAtt VPC.DefaultSecurityGroup
        Ec2SubnetId: !Ref Subnet
        MasterInstanceGroup:
          InstanceCount: !Ref EMRMasterInstanceCount
          InstanceType: !Ref EMRMasterInstanceType
        CoreInstanceGroup:
          InstanceCount: !Ref EMRCoreInstanceCount
          InstanceType: !Ref EMRCoreInstanceType
        TerminationProtected: false
      JobFlowRole: !Ref EMRProfile
      Name: !Sub "${AWS::StackName}-${AWS::Region}-warehouse-emr-cluster"
      ReleaseLabel: !Ref EMRRelease
      ServiceRole: !Ref EMRServiceRole
      LogUri: !Sub "s3://${Bucket}/logs/emr"

  ####################
  # Delivery Streams #
  ####################

  DeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "firehose.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: Execution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:PutObject*
                Effect: Allow
                Resource:
                  - !Sub "${Bucket.Arn}/data/raw/events/*"

  EventsDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      S3DestinationConfiguration:
        BucketARN: !GetAtt Bucket.Arn
        Prefix: data/raw/events/
        BufferingHints:
          IntervalInSeconds: 900
          SizeInMBs: 128
        CompressionFormat: GZIP
        RoleARN: !GetAtt DeliveryStreamRole.Arn

  EventsDeliveryStreamRecordsPerSecondAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Statistic: Average
      Namespace: "AWS/Firehose"
      MetricName: IncomingRecords
      Dimensions:
        - Name: DeliveryStreamName
          Value: !Ref EventsDeliveryStream
      ComparisonOperator: GreaterThanThreshold
      Threshold: 4000
      DatapointsToAlarm: 3
      EvaluationPeriods: 5
      Period: 60

  EventsDeliveryStreamTransactionsPerSecondAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Statistic: Average
      Namespace: "AWS/Firehose"
      MetricName: PutRecordBatch.Requests
      Dimensions:
        - Name: DeliveryStreamName
          Value: !Ref EventsDeliveryStream
      ComparisonOperator: GreaterThanThreshold
      Threshold: 1600
      DatapointsToAlarm: 3
      EvaluationPeriods: 5
      Period: 60

  EventsDeliveryStreamDataThroughputAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Statistic: Average
      Namespace: "AWS/Firehose"
      MetricName: IncomingBytes
      Dimensions:
        - Name: DeliveryStreamName
          Value: !Ref EventsDeliveryStream
      ComparisonOperator: GreaterThanThreshold
      Threshold: 4194304
      DatapointsToAlarm: 3
      EvaluationPeriods: 5
      Period: 60

  #############
  # Real Time #
  #############

  RealTimeDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardBody: !Sub |
        {
          "start": "-PT1H",
          "periodOverride": "inherit",
          "widgets": [
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": {
                "markdown": "# Clickthrough Rate"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Clickthrough Rate"
              }
            }
          ]
        }

  RealTimeEventsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

  RealTimeEventsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bin/events
      Role: !GetAtt RealTimeEventsLambdaRole.Arn

  RealTimeEventsApplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "kinesisanalytics.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonKinesisAnalyticsFullAccess
      Policies:
        - PolicyName: Execution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunctionConfiguration
                Effect: Allow
                Resource:
                  - !Ref RealTimeEventsLambda.Alias
              - Action:
                  - firehose:DescribeDeliveryStream
                  - firehose:Get*
                Effect: Allow
                Resource:
                  - !GetAtt EventsDeliveryStream.Arn

  RealTimeEventsApplication:
    Type: AWS::KinesisAnalytics::Application
    Properties:
      ApplicationCode: |
        CREATE OR REPLACE STREAM IMPRESSIONS_OUTPUT (
          AD_ID VARCHAR(64),
          USER_ID VARCHAR(64),
          VIEWED_AT TIMESTAMP
        );

        CREATE OR REPLACE PUMP IMPRESSIONS_OUTPUT_PUMP AS
        INSERT INTO IMPRESSIONS_OUTPUT
        SELECT AD_ID, USER_ID, VIEWED_AT
        FROM AD_IMPRESSIONS_001
        WINDOWED BY STAGGER (
          PARTITION BY AD_ID, USER_ID, VIEWED_AT
          RANGE INTERVAL '1' MINUTE
        );
      Inputs:
        - NamePrefix: EVENTS
          KinesisFirehoseInput:
            ResourceARN: !GetAtt EventsDeliveryStream.Arn
            RoleARN: !GetAtt RealTimeEventsApplicationRole.Arn
          InputSchema:
            RecordEncoding: UTF-8
            RecordFormat:
              RecordFormatType: JSON
              MappingParameters:
                JSONMappingParameters:
                  RecordRowPath: "$"
            RecordColumns:
              - Name: USER_ID
                SqlType: VARCHAR(64)
                Mapping: "$.user_id"
              - Name: OBJECT_TYPE
                SqlType: VARCHAR(255)
                Mapping: "$.object_type"
              - Name: OBJECT_ID
                SqlType: VARCHAR(64)
                Mapping: "$.object_id"
              - Name: EVENT
                SqlType: VARCHAR(255)
                Mapping: "$.event"
              - Name: OCCURRED_AT
                SqlType: TIMESTAMP
                Mapping: "$.occurred_at"

  RealTimeEventsOutputs:
    Type: AWS::KinesisAnalytics::ApplicationOutput
    Properties:
      ApplicationName: !Ref RealTimeEventsApplication
      Output:
        Name: EVENTS_OUTPUT
        DestinationSchema:
          RecordFormatType: JSON
        LambdaOutput:
          ResourceARN: !Ref RealTimeEventsLambda.Alias
          RoleARN: !GetAtt RealTimeEventsApplicationRole.Arn

  #############
  # Data Lake #
  #############

  Database:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: warehouse

  CrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "glue.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: Execution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:GetObject*
                  - s3:PutObject*
                Effect: Allow
                Resource:
                  - !Sub "${Bucket.Arn}/data/raw/events/*"
              - Action:
                  - s3:ListBucket*
                Effect: Allow
                Resource:
                  - !GetAtt Bucket.Arn

  RawEventsCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: raw_events_crawler
      Description: Crawls the raw event data
      Role: !GetAtt CrawlerRole.Arn
      DatabaseName: !Ref Database
      Targets: # CloudFormation does not seem to support targeting an existing table.  Console does, at least.
        S3Targets:
          - Path: !Sub "s3://${Bucket}/data/raw/events/"
      TablePrefix: raw_
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: LOG
      Schedule:
        ScheduleExpression: cron(20 * * * ? *)
      Configuration: |
        {
          "Version": 1.0,
          "Grouping": {
            "TableGroupingPolicy": "CombineCompatibleSchemas"
          },
          "CrawlerOutput": {
            "Partitions": {
              "AddOrUpdateBehavior": "InheritFromTable"
            },
            "Tables": {
              "AddOrUpdateBehavior": "MergeNewColumns"
            }
          }
        }

  EventsTable:
    Type: AWS::Glue::Table
    DependsOn:
      - Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref Database
      TableInput:
          Name: events
          Description: Events
          TableType: EXTERNAL_TABLE
          Parameters:
            classification: orc
          PartitionKeys:
            - Name: year
              Type: int
            - Name: month
              Type: int
          StorageDescriptor:
            Location: !Sub "s3://${Bucket}/data/lake/events/"
            StoredAsSubDirectories: true
            InputFormat: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
            SerdeInfo:
              SerializationLibrary: org.apache.hadoop.hive.ql.io.orc.OrcSerde
            OutputFormat: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
            Columns:
              - Name: user_id
                Type: string
              - Name: object_type
                Type: string
              - Name: object_id
                Type: string
              - Name: event
                Type: string
              - Name: occurred_at
                Type: timestamp

  ETLJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "glue.${AWS::URLSuffix}"
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "*"
                Effect: Allow
                Resource: "*"

  EventsPythonETLJob:
    Type: AWS::Glue::Job
    Properties:
      Role: !GetAtt ETLJobRole.Arn
      Command:
        Name: glueetl
        ScriptLocation: !Sub "s3://${CodeBucket}/${CodePrefix}/scripts/glue/events_etl.py"
      DefaultArguments:
        "--enable-glue-datacatalog": ""
        "--job-bookmark-option": "job-bookmark-enable"
        "--database_name": !Ref Database
        "--raw_table_name": raw_events # Hard-coded because CloudFormation-based Crawlers can't crawl an existing table
        "--table_name": !Ref EventsTable
      ExecutionProperty:
        MaxConcurrentRuns: 1
      MaxRetries: 0

  EventsScalaETLJob:
    Type: AWS::Glue::Job
    Properties:
      Role: !GetAtt ETLJobRole.Arn
      Command:
        Name: glueetl
        ScriptLocation: !Sub "s3://${CodeBucket}/${CodePrefix}/scripts/glue/events_etl.scala"
      DefaultArguments:
        "--job-language": scala
        "--class": GlueApp
        "--enable-glue-datacatalog": ""
        "--job-bookmark-option": "job-bookmark-enable"
        "--database_name": !Ref Database
        "--raw_table_name": raw_events # Hard-coded because CloudFormation-based Crawlers can't crawl an existing table
        "--table_name": !Ref EventsTable
      ExecutionProperty:
        MaxConcurrentRuns: 1
      MaxRetries: 0

  #########
  # Batch #
  #########

  EventSummariesTable:
    Type: AWS::Glue::Table
    DependsOn:
      - Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref Database
      TableInput:
          Name: event_summaries
          Description: Event Summaries
          TableType: EXTERNAL_TABLE
          Parameters:
            classification: orc
          StorageDescriptor:
            Location: !Sub "s3://${Bucket}/data/lake/events/"
            StoredAsSubDirectories: true
            InputFormat: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
            SerdeInfo:
              SerializationLibrary: org.apache.hadoop.hive.ql.io.orc.OrcSerde
            OutputFormat: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
            Columns:
              - Name: id
                Type: string

  UserSummariesTable:
    Type: AWS::Glue::Table
    DependsOn:
      - Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref Database
      TableInput:
          Name: user_summaries
          Description: User Summaries
          TableType: EXTERNAL_TABLE
          Parameters:
            classification: orc
          StorageDescriptor:
            Location: !Sub "s3://${Bucket}/data/lake/users/"
            StoredAsSubDirectories: true
            InputFormat: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
            SerdeInfo:
              SerializationLibrary: org.apache.hadoop.hive.ql.io.orc.OrcSerde
            OutputFormat: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
            Columns:
              - Name: id
                Type: string

  EventsInfoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
        - AttributeName: Date
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
        - AttributeName: Date
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "logs.${AWS::Region}.${AWS::URLSuffix}"
                - !Sub "datapipeline.${AWS::URLSuffix}"
                - !Sub "dynamodb.${AWS::URLSuffix}"
                - !Sub "ec2.${AWS::URLSuffix}"
                - !Sub "elasticmapreduce.${AWS::URLSuffix}"
                - !Sub "iam.${AWS::URLSuffix}"
                - !Sub "rds.${AWS::URLSuffix}"
                - !Sub "redshift.${AWS::URLSuffix}"
                - !Sub "s3.${AWS::URLSuffix}"
                - !Sub "sns.${AWS::URLSuffix}"
                - !Sub "sqs.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSDataPipelineRole
      Policies:
        - PolicyName: GlueAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - glue:*
                Effect: Allow
                Resource: "*"

  PipelineProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Ref PipelineRole
      Roles:
        - !Ref PipelineRole

  PipelineResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "logs.${AWS::Region}.${AWS::URLSuffix}"
                - !Sub "datapipeline.${AWS::URLSuffix}"
                - !Sub "dynamodb.${AWS::URLSuffix}"
                - !Sub "ec2.${AWS::URLSuffix}"
                - !Sub "elasticmapreduce.${AWS::URLSuffix}"
                - !Sub "iam.${AWS::URLSuffix}"
                - !Sub "rds.${AWS::URLSuffix}"
                - !Sub "redshift.${AWS::URLSuffix}"
                - !Sub "s3.${AWS::URLSuffix}"
                - !Sub "sns.${AWS::URLSuffix}"
                - !Sub "sqs.${AWS::URLSuffix}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforDataPipelineRole
      Policies:
        - PolicyName: GlueAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - glue:*
                Effect: Allow
                Resource: "*"

  PipelineResourceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Ref PipelineResourceRole
      Roles:
        - !Ref PipelineResourceRole

  EventsPipeline:
    Type: AWS::DataPipeline::Pipeline
    DependsOn: !
      - PipelineProfile
      - PipelineResourceProfile
    Properties:
      Name: Events Pipeline
      Activate: false
      ParameterObjects:
        - Id: myRegion
          Attributes:
            - Key: type
              StringValue: String
            - Key: default
              StringValue: !Ref AWS::Region
      ParameterValues:
        - Id: myRegion
          StringValue: !Ref AWS::Region
      PipelineObjects:
        - Id: Default
          Name: Default
          Fields:
            - Key: type
              StringValue: Default
            - Key: scheduleType
              StringValue: ondemand
            - Key: role
              StringValue: !Ref PipelineRole
            - Key: resourceRole
              StringValue: !Ref PipelineResourceRole
            - Key: pipelineLogUri
              StringValue: !Sub "s3://${Bucket}/logs/data-pipeline/"
            - Key: failureAndRerunMode
              StringValue: cascade
        - Id: HiveMetastoreClientFactoryClass
          Name: Hive Metastore Client Factory Class
          Fields:
            - Key: type
              StringValue: Property
            - Key: key
              StringValue: hive.metastore.client.factory.class
            - Key: value
              StringValue: com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory
        - Id: HiveMetastoreCatalog
          Name: Hive Metastore Catalog
          Fields:
            - Key: type
              StringValue: Property
            - Key: key
              StringValue: hive.metastore.glue.catalogid
            - Key: value
              StringValue: !Ref AWS::AccountId
        - Id: GlueCatalogAsHiveMetastore
          Name: Glue Catalog as Hive Metastore
          Fields:
            - Key: type
              StringValue: EmrConfiguration
            - Key: classification
              StringValue: hive-site
            - Key: property
              RefValue: HiveMetastoreClientFactoryClass
            - Key: property
              RefValue: HiveMetastoreCatalog
        - Id: GlueCatalogAsSparkMetastore
          Name: Glue Catalog as Spark Metastore
          Fields:
            - Key: type
              StringValue: EmrConfiguration
            - Key: classification
              StringValue: spark-hive-site
            - Key: property
              RefValue: HiveMetastoreClientFactoryClass
            - Key: property
              RefValue: HiveMetastoreCatalog
        - Id: EMRCluster
          Name: EMR Cluster
          Fields:
            - Key: type
              StringValue: EmrCluster
            - Key: keyPair
              StringValue: temp
            - Key: masterInstanceType
              StringValue: !Ref EMRMasterInstanceType
            - Key: coreInstanceType
              StringValue: !Ref EMRCoreInstanceType
            - Key: coreInstanceCount
              StringValue: !Ref EMRCoreInstanceCount
            - Key: releaseLabel
              StringValue: !Ref EMRRelease
            - Key: applications
              StringValue: hive
            - Key: applications
              StringValue: pig
            - Key: applications
              StringValue: spark
            - Key: terminateAfter
              StringValue: 1 hours
            - Key: configuration
              RefValue: GlueCatalogAsHiveMetastore
            - Key: configuration
              RefValue: GlueCatalogAsSparkMetastore
        - Id: EventsJob
          Name: Events Job
          Fields:
            - Key: type
              StringValue: HiveActivity
            - Key: scriptUri
              StringValue: !Sub "s3://${CodeBucket}/${CodePrefix}/scripts/hive/events.hql"
            - !If
                - EMREnabled
                - Key: workerGroup
                  StringValue: !Sub "${AWS::StackName}-${AWS::Region}-emr-worker-group"
                - Key: runsOn
                  RefValue: EMRCluster
            - Key: stage
              StringValue: false

  #######
  # API #
  #######

  APIRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "apigateway.${AWS::URLSuffix}"
      Policies:
        - PolicyName: Execution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - firehose:PutRecordBatch
                Effect: Allow
                Resource:
                  - !GetAtt EventsDeliveryStream.Arn
              - Action:
                  - dynamodb:Query
                Effect: Allow
                Resource:
                  - !GetAtt EventsInfoTable.Arn

  API:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          # LoggingLevel: "ERROR"
          MetricsEnabled: true
      TracingEnabled: true
      DefinitionBody:
        openapi: 3.0.0
        info:
          version: 0.1.0
          title: !Ref APIName
        paths:
          /data/events:
            post:
              summary: Record a batch of events
              operationId: data-events
              requestBody:
                description: A batch of ad events
                required: true
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/DataEvents"
              x-amazon-apigateway-integration:
                type: AWS
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:firehose:action/PutRecordBatch"
                credentials: !GetAtt APIRole.Arn
                requestTemplates:
                  application/json: !Sub |
                    #set($newline = "
                    ")
                    {
                      "DeliveryStreamName": "${EventsDeliveryStream}",
                      "Records": [
                        #foreach($elem in $input.path('$.events'))
                        #set($val = $input.json("$.events[$foreach.index]"))
                        #set($rec = "${!val}${!newline}")
                        { "Data": "$util.base64Encode($rec)" }#if($foreach.hasNext),#end
                        #end
                      ]
                    }
                requestParameters:
                  integration.request.header.Content-Type: "'x-amz-json-1.1'"
                responses:
                  '200':
                    statusCode: 200
                    responseTemplates:
                      application/json: |
                        {
                          "failed_count": $input.path("$.FailedPutCount"),
                          "records": [
                            #foreach($record in $input.path("$.RequestResponses"))
                            {
                              #if($record.keySet().contains("ErrorCode"))
                              "failed": true,
                              "error_code": "$record.ErrorCode",
                              "error_message": "$record.ErrorMessage"
                              #else
                              "failed": false
                              #end
                            }#if($foreach.hasNext),#end
                            #end
                          ]
                        }
              responses:
                '200':
                  description: |
                    The batch was processed.  Some events may not have been
                    processed.  The response contains a list of events in the
                    same order submitted, indicating which succeeded and which
                    failed.
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/BatchWriteResponse"
          /info/events:
            get:
              summary: Get info about events
              operationId: info-events
              x-amazon-apigateway-integration:
                type: AWS
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query"
                credentials: !GetAtt APIRole.Arn
                requestTemplates:
                  application/json: !Sub |
                    {
                      #if($input.params('page') != "")
                      "ExclusiveStartKey": $util.parseJSON($util.base64Decode($input.params('page'))),
                      #end
                      "ExpressionAttributeNames": {
                        "#ID": "ID",
                        "#Date": "Date"
                      },
                      "ExpressionAttributeValues": {
                        ":id": { "S": "$input.params('id')" },
                        ":start": { "S": "$input.params('start')" },
                        ":end": { "S": #if($input.params('end') != "") "$input.params('end')" #else "$input.params('start')" #end }
                      },
                      "KeyConditionExpression": "#ID = :id AND #Date BETWEEN #start AND #end",
                      "Limit": $input.params('limit'),
                      "TableName": "${EventsInfoTable}"
                    }
                requestParameters:
                  integration.request.header.Content-Type: "'x-amz-json-1.1'"
                responses:
                  '200':
                    statusCode: 200
                    responseTemplates:
                      application/json: |
                        {
                          #if($input.path('$.LastEvaluatedKey') != "")
                          "next": "$util.base64Encode($input.json('$.LastEvaluatedKey'))",
                          #end
                          "count": $input.path('$.Count'),
                          "events": [
                            #foreach($elem in $input.path('$.Items'))
                            {
                              "id": "$elem.ID"
                            }#if($foreach.hasNext),#end
                            #end
                          ]
                        }
              responses:
                '200':
                  description: |
                    The query was successful.
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/EventsInfo"
        x-amazon-apigateway-request-validators:
          all:
            validateRequestBody: true
            validateRequestParameters: true
        x-amazon-apigateway-request-validator: all
        components:
          schemas:
            DataEvents:
              type: object
              properties:
                events:
                  type: array
                  items:
                    $ref: "#/components/schemas/DataEvent"
                  minItems: 1
                  maxItems: 500
              required:
                - events
              additionalProperties: false
            DataEvent:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                object_type:
                  type:
                    $ref: "#/components/schemas/ID"
                object_id:
                  type: string
                  format: uuid
                event:
                  type:
                    $ref: "#/components/schemas/ID"
                occurred_at:
                  type:
                    $ref: "#/components/schemas/Timestamp"
              required:
                - user_id
                - object_type
                - object_id
                - event
                - occurred_at
              additionalProperties: false
            BatchWriteResponse:
              type: object
              properties:
                records:
                  type: array
                  items:
                    $ref: "#/components/schemas/BatchWriteRecord"
                  minItems: 1
                  maxItems: 500
              required:
                - records
              additionalProperties: false
            BatchWriteRecord:
              type: object
              properties:
                failed:
                  type: boolean
                error_code:
                  type: string
                error_message:
                  type: string
              required:
                - failed
              additionalProperties: false
            EventsInfo:
              type: object
              properties:
                next:
                  type:
                    $ref: "#/components/schemas/Base64"
                count:
                  type: integer
                  minimum: 0
                events:
                  type: array
                  items:
                    $ref: "#/components/schemas/EventInfo"
              required:
                - count
                - events
              additionalProperties: false
            EventInfo:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
              required:
                - id
              additionalProperties: false
            Error:
              type: object
              properties:
                code:
                  type: integer
                  format: int32
                message:
                  type: string
              required:
                - code
                - message
              additionalProperties: false
            ID:
              type: string
              format: "^[a-z]+[-a-z0-9]*$"
            Date:
              type: string
              format: "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
            Timestamp:
              type: string
              format: "^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?$"
            Base64:
              type: string
              format: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Condition: DNSEnabled
    Properties:
      DomainName: !Ref DNSName
      DomainValidationOptions:
        - DomainName: !Ref DNSName
          ValidationDomain: !Ref ValidationDomain

  DomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: DNSEnabled
    Properties:
      CertificateArn: !Ref Certificate
      DomainName: !Ref DNSName

  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: DNSEnabled
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !Ref API
      Stage: !Ref API.Stage

  #######
  # DNS #
  #######

  HostedZone:
    Type: AWS::Route53::HostedZone
    Condition: InternalHostedZone
    Properties:
      Name: !Ref DNSDomainName

  RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Condition: DNSEnabled
    Properties:
      HostedZoneId: !If [InternalHostedZone, !Ref HostedZone, !Ref HostedZoneID]
      RecordSets:
        - Type: A
          Name: !Ref DNSName
          AliasTarget:
            DNSName: !GetAtt DomainName.DistributionDomainName
            HostedZoneId: Z2FDTNDATAQYW2

  #################
  # Ops Dashboard #
  #################

  OpsDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardBody: !Sub |
        {
          "start": "-PT1H",
          "periodOverride": "inherit",
          "widgets": [
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Beacon Endpoints" }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/ApiGateway", "Count", "ApiName", "${APIName}", "Resource", "/data/events", "Method", "POST", "Stage", "${Stage}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Request Rate"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/ApiGateway", "Latency", "ApiName", "${APIName}", "Resource", "/data/events", "Method", "POST", "Stage", "${Stage}"]
                ],
                "period": 60,
                "stat": "p95",
                "region": "${AWS::Region}",
                "title": "Latency"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/ApiGateway", "IntegrationLatency", "ApiName", "${APIName}", "Resource", "/data/events", "Method", "POST", "Stage", "${Stage}"]
                ],
                "period": 60,
                "stat": "p95",
                "region": "${AWS::Region}",
                "title": "Integration Latency"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/ApiGateway", "4XXError", "ApiName", "${APIName}", "Resource", "/data/events", "Method", "POST", "Stage", "${Stage}"],
                  [".",              "5XXError", ".",       "${APIName}", ".",        "/data/events", ".",      "POST", ".",     "${Stage}"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Errors"
              }
            },
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Firehoses" }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "Expression": "SEARCH('{AWS/Firehose,DeliveryStreamName} MetricName=\"IncomingRecords\"', 'Sum', 60)" } ]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Incoming Records"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "Expression": "SEARCH('{AWS/Firehose,DeliveryStreamName} MetricName=\"IncomingBytes\"', 'Sum', 60)" } ]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Incoming Bytes"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "Expression": "SEARCH('{AWS/Firehose,DeliveryStreamName} MetricName=\"DeliveryToS3.Success\"', 'Average', 60)" } ]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Delivery To S3 Success"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "Expression": "SEARCH('{AWS/Firehose,DeliveryStreamName} MetricName=\"DeliveryToS3.Recors\"', 'Sum', 60)" } ]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Delivery To S3 Records"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "Expression": "SEARCH('{AWS/Firehose,DeliveryStreamName} MetricName=\"DeliveryToS3.Bytes\"', 'Sum', 60)" } ]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Delivery To S3 Bytes"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "Expression": "SEARCH('{AWS/Firehose,DeliveryStreamName} MetricName=\"DeliveryToS3.DataFreshness\"', 'Maximum', 60)" } ]
                ],
                "period": 60,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Delivery To S3 Data Freshness"
              }
            },
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Real-Time App" }
            },
            {
              "type": "metric",
              "width": 24,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "Success"]
                ],
                "period": 60,
                "region": "${AWS::Region}",
                "title": "Success"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "KPUs"]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "KPUs"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "MillisBehindLatest"]
                ],
                "period": 60,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Lag (ms)"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "Records"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Records Processed"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "Bytes"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Bytes Processed"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "InputProcessing.Success"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Input Processing Success"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "InputProcessing.OkBytes"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Input Processing Bytes"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "InputProcessing.Duration"]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Input Processing Duration"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "InputProcessing.OkRecords"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Input Processing Successful Records"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "InputProcessing.DroppedRecords"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Input Processing Dropped Records"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "InputProcessing.ProcessingFailedRecords"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Input Processing Failed Records"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "LambdaDelivery.OkRecords"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Delivery Success"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "LambdaDelivery.DeliveryFailedRecords"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Delivery Failures"
              }
            },
            {
              "type": "metric",
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/KinesisAnalytics", "LambdaDelivery.Duration"]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Lambda Delivery Duration"
              }
            },
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Lambas" }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Invocations"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Invocations"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Duration"]
                ],
                "period": 60,
                "stat": "p95",
                "region": "${AWS::Region}",
                "title": "Duration"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Errors"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Errors"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "DeadLetterErrors"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Dead Letter Errors"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "ConcurrentExecutions"]
                ],
                "period": 60,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Concurrent Executions"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "UnreservedConcurrentExecutions"]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Unreserved Concurrent Executions"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Throttles"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Throttles"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "IteratorAge"]
                ],
                "period": 60,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Iterator Age"
              }
            },
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Data Lake" }
            },
            {
              "type": "metric",
              "width": 12,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/S3", "BucketSizeBytes"]
                ],
                "period": 86400,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Bucket Size (bytes)"
              }
            },
            {
              "type": "metric",
              "width": 12,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/S3", "NumberOfObject"]
                ],
                "period": 86400,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Bucket Size (objects)"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/S3", "AllRequests"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "All Requests"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/S3", "GetRequests"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Get Requests"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/S3", "PutRequests"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Put Requests"
              }
            },
            {
              "type": "metric",
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  ["AWS/S3", "SelectRequests"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Select Requests"
              }
            },
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Athena" }
            },
            {
              "type": "text",
              "width": 24,
              "height": 1,
              "properties": { "markdown": "# Glue ETL Jobs" }
            }
          ]
        }
